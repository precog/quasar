Chain
├─ $FoldLeftF
│  ├─ Chain
│  │  ├─ $ReadF(db; zips)
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("0" -> {
│  │  │  │          "$push": {
│  │  │  │            "$let": {
│  │  │  │              "vars": {
│  │  │  │                "a": [
│  │  │  │                  {
│  │  │  │                    "$arrayElemAt": [["$_id", "$$ROOT"], { "$literal": NumberInt("0") }]
│  │  │  │                  },
│  │  │  │                  {
│  │  │  │                    "$arrayElemAt": [["$_id", "$$ROOT"], { "$literal": NumberInt("1") }]
│  │  │  │                  }]
│  │  │  │              },
│  │  │  │              "in": "$$a"
│  │  │  │            }
│  │  │  │          }
│  │  │  │        })
│  │  │  ╰─ By({ "$literal": null })
│  │  ╰─ $ProjectF
│  │     ├─ Name("_id" -> "$_id")
│  │     ├─ Name("value")
│  │     │  ├─ Name("right" -> "$0")
│  │     │  ├─ Name("left" -> { "$literal": [] })
│  │     │  ╰─ Name("_id" -> "$_id")
│  │     ╰─ IncludeId
│  ╰─ Chain
│     ├─ $FoldLeftF
│     │  ├─ Chain
│     │  │  ├─ $ReadF(db; zips)
│     │  │  ├─ $GroupF
│     │  │  │  ├─ Grouped
│     │  │  │  │  ╰─ Name("0" -> {
│     │  │  │  │          "$push": {
│     │  │  │  │            "$let": {
│     │  │  │  │              "vars": {
│     │  │  │  │                "a": [
│     │  │  │  │                  {
│     │  │  │  │                    "$arrayElemAt": [["$_id", "$$ROOT"], { "$literal": NumberInt("0") }]
│     │  │  │  │                  },
│     │  │  │  │                  {
│     │  │  │  │                    "$arrayElemAt": [["$_id", "$$ROOT"], { "$literal": NumberInt("1") }]
│     │  │  │  │                  }]
│     │  │  │  │              },
│     │  │  │  │              "in": "$$a"
│     │  │  │  │            }
│     │  │  │  │          }
│     │  │  │  │        })
│     │  │  │  ╰─ By({ "$literal": null })
│     │  │  ╰─ $ProjectF
│     │  │     ├─ Name("_id" -> "$_id")
│     │  │     ├─ Name("value")
│     │  │     │  ├─ Name("left" -> "$0")
│     │  │     │  ├─ Name("right" -> { "$literal": [] })
│     │  │     │  ╰─ Name("_id" -> "$_id")
│     │  │     ╰─ IncludeId
│     │  ╰─ Chain
│     │     ├─ $ReadF(db; zips)
│     │     ├─ $GroupF
│     │     │  ├─ Grouped
│     │     │  │  ╰─ Name("f0" -> { "$sum": { "$literal": NumberInt("1") } })
│     │     │  ╰─ By({ "$literal": null })
│     │     ├─ $MapF
│     │     │  ├─ JavaScript(function (key, value) { return [null, { "left": [], "right": [value.f0] }] })
│     │     │  ╰─ Scope(Map())
│     │     ╰─ $ReduceF
│     │        ├─ JavaScript(function (key, values) {
│     │        │               var result = { "left": [], "right": [] };
│     │        │               values.forEach(
│     │        │                 function (value) {
│     │        │                   result.left = result.left.concat(value.left);
│     │        │                   result.right = result.right.concat(value.right)
│     │        │                 });
│     │        │               return result
│     │        │             })
│     │        ╰─ Scope(Map())
│     ├─ $MatchF
│     │  ╰─ Doc
│     │     ├─ NotExpr($left -> Size(0))
│     │     ╰─ NotExpr($right -> Size(0))
│     ├─ $UnwindF(DocField(BsonField.Name("right")))
│     ├─ $UnwindF(DocField(BsonField.Name("left")))
│     ├─ $ProjectF
│     │  ├─ Name("0" -> { "$literal": true })
│     │  ├─ Name("1" -> { "$arrayElemAt": [["$left", "$right"], { "$literal": NumberInt("1") }] })
│     │  ├─ Name("src" -> ["$left", "$right"])
│     │  ╰─ IgnoreId
│     ├─ $MatchF
│     │  ╰─ And
│     │     ├─ Doc
│     │     │  ╰─ Expr($0 -> Eq(Bool(true)))
│     │     ╰─ Doc
│     │        ╰─ Expr($1 -> Gt(Int32(10)))
│     ├─ $ProjectF
│     │  ├─ Name("0" -> [
│     │  │       {
│     │  │         "$arrayElemAt": [
│     │  │           { "$arrayElemAt": ["$src", { "$literal": NumberInt("0") }] },
│     │  │           { "$literal": NumberInt("0") }]
│     │  │       },
│     │  │       {
│     │  │         "$cond": [
│     │  │           {
│     │  │             "$and": [
│     │  │               {
│     │  │                 "$lte": [
│     │  │                   { "$literal": {  } },
│     │  │                   {
│     │  │                     "$arrayElemAt": [
│     │  │                       { "$arrayElemAt": ["$src", { "$literal": NumberInt("0") }] },
│     │  │                       { "$literal": NumberInt("1") }]
│     │  │                   }]
│     │  │               },
│     │  │               {
│     │  │                 "$lt": [
│     │  │                   {
│     │  │                     "$arrayElemAt": [
│     │  │                       { "$arrayElemAt": ["$src", { "$literal": NumberInt("0") }] },
│     │  │                       { "$literal": NumberInt("1") }]
│     │  │                   },
│     │  │                   { "$literal": [] }]
│     │  │               }]
│     │  │           },
│     │  │           {
│     │  │             "$arrayElemAt": [
│     │  │               { "$arrayElemAt": ["$src", { "$literal": NumberInt("0") }] },
│     │  │               { "$literal": NumberInt("1") }]
│     │  │           },
│     │  │           { "$literal": undefined }]
│     │  │       },
│     │  │       {
│     │  │         "$gt": [
│     │  │           { "$arrayElemAt": ["$src", { "$literal": NumberInt("1") }] },
│     │  │           { "$literal": NumberInt("10") }]
│     │  │       }])
│     │  ╰─ IgnoreId
│     ├─ $MapF
│     │  ├─ JavaScript(function (key, value) { return [null, { "right": [], "left": [value["0"]] }] })
│     │  ╰─ Scope(Map())
│     ╰─ $ReduceF
│        ├─ JavaScript(function (key, values) {
│        │               var result = { "right": [], "left": [] };
│        │               values.forEach(
│        │                 function (value) {
│        │                   result.right = result.right.concat(value.right);
│        │                   result.left = result.left.concat(value.left)
│        │                 });
│        │               return result
│        │             })
│        ╰─ Scope(Map())
├─ $MatchF
│  ╰─ Doc
│     ├─ NotExpr($right -> Size(0))
│     ╰─ NotExpr($left -> Size(0))
├─ $UnwindF(DocField(BsonField.Name("left")))
├─ $UnwindF(DocField(BsonField.Name("right")))
├─ $SimpleMapF
│  ├─ Map
│  │  ╰─ Obj
│  │     ├─ Key(f0: [_.left, _.right][0][1].city)
│  │     ╰─ Key(b0: (function (__val) {
│  │            return [
│  │              (isObject(__val[1][1]) && (! Array.isArray(__val[1][1]))) ? __val[1][1].city : undefined]
│  │          })(
│  │            [_.left, _.right]))
│  ╰─ Scope(Map())
├─ $GroupF
│  ├─ Grouped
│  │  ╰─ Name("f0" -> { "$first": "$f0" })
│  ╰─ By
│     ╰─ Name("0" -> "$b0")
╰─ $ProjectF
   ├─ Name("value" -> "$f0")
   ╰─ ExcludeId