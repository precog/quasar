Chain
├─ $FoldLeftF
│  ├─ Chain
│  │  ├─ $ReadF(db; zips)
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("0" -> {
│  │  │  │          "$push": {
│  │  │  │            "$let": {
│  │  │  │              "vars": {
│  │  │  │                "a": [
│  │  │  │                  {
│  │  │  │                    "$arrayElemAt": [["$_id", "$$ROOT"], { "$literal": NumberInt("0") }]
│  │  │  │                  },
│  │  │  │                  {
│  │  │  │                    "$arrayElemAt": [["$_id", "$$ROOT"], { "$literal": NumberInt("1") }]
│  │  │  │                  }]
│  │  │  │              },
│  │  │  │              "in": "$$a"
│  │  │  │            }
│  │  │  │          }
│  │  │  │        })
│  │  │  ╰─ By({ "$literal": null })
│  │  ╰─ $ProjectF
│  │     ├─ Name("_id" -> "$_id")
│  │     ├─ Name("value")
│  │     │  ├─ Name("left" -> "$0")
│  │     │  ├─ Name("right" -> { "$literal": [] })
│  │     │  ╰─ Name("_id" -> "$_id")
│  │     ╰─ IncludeId
│  ╰─ Chain
│     ├─ $ReadF(db; zips)
│     ├─ $GroupF
│     │  ├─ Grouped
│     │  │  ╰─ Name("f0" -> { "$sum": { "$literal": NumberInt("1") } })
│     │  ╰─ By({ "$literal": null })
│     ├─ $MapF
│     │  ├─ JavaScript(function (key, value) { return [null, { "left": [], "right": [value.f0] }] })
│     │  ╰─ Scope(Map())
│     ╰─ $ReduceF
│        ├─ JavaScript(function (key, values) {
│        │               var result = { "left": [], "right": [] };
│        │               values.forEach(
│        │                 function (value) {
│        │                   result.left = result.left.concat(value.left);
│        │                   result.right = result.right.concat(value.right)
│        │                 });
│        │               return result
│        │             })
│        ╰─ Scope(Map())
├─ $MatchF
│  ╰─ Doc
│     ├─ NotExpr($left -> Size(0))
│     ╰─ NotExpr($right -> Size(0))
├─ $UnwindF(DocField(BsonField.Name("right")))
├─ $UnwindF(DocField(BsonField.Name("left")))
├─ $SimpleMapF
│  ├─ Map
│  │  ╰─ Let(__val)
│  │     ├─ JsCore([_.left, _.right])
│  │     ╰─ Arr
│  │        ├─ Obj
│  │        │  ├─ Key(city: (isObject(__val[0][1]) && (! Array.isArray(__val[0][1]))) ? __val[0][1].city : undefined)
│  │        │  ╰─ Key(cnt: __val[1])
│  │        ╰─ Ident(__val)
│  ╰─ Scope(Map())
├─ $ProjectF
│  ├─ Name("0" -> {
│  │       "$arrayElemAt": [
│  │         { "$arrayElemAt": ["$$ROOT", { "$literal": NumberInt("1") }] },
│  │         { "$literal": NumberInt("1") }]
│  │     })
│  ├─ Name("src" -> "$$ROOT")
│  ╰─ IgnoreId
├─ $SortF
│  ╰─ SortKey(0 -> Descending)
╰─ $ProjectF
   ├─ Name("value" -> { "$arrayElemAt": ["$src", { "$literal": NumberInt("0") }] })
   ╰─ ExcludeId