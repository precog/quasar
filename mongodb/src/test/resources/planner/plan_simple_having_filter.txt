Chain
├─ $FoldLeftF
│  ├─ Chain
│  │  ├─ $FoldLeftF
│  │  │  ├─ Chain
│  │  │  │  ├─ $ReadF(db; zips)
│  │  │  │  ├─ $SimpleMapF
│  │  │  │  │  ├─ Map
│  │  │  │  │  │  ╰─ Let(__val)
│  │  │  │  │  │     ├─ JsCore([_._id, _])
│  │  │  │  │  │     ╰─ JsCore([__val[0], __val[1]])
│  │  │  │  │  ╰─ Scope(Map())
│  │  │  │  ├─ $GroupF
│  │  │  │  │  ├─ Grouped
│  │  │  │  │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│  │  │  │  │  ╰─ By({ "$literal": null })
│  │  │  │  ╰─ $ProjectF
│  │  │  │     ├─ Name("_id" -> "$_id")
│  │  │  │     ├─ Name("value")
│  │  │  │     │  ├─ Name("left" -> "$0")
│  │  │  │     │  ├─ Name("right" -> { "$literal": [] })
│  │  │  │     │  ╰─ Name("_id" -> "$_id")
│  │  │  │     ╰─ IncludeId
│  │  │  ╰─ Chain
│  │  │     ├─ $ReadF(db; zips)
│  │  │     ├─ $SimpleMapF
│  │  │     │  ├─ Map
│  │  │     │  │  ╰─ Let(__val)
│  │  │     │  │     ├─ JsCore([_._id, _])
│  │  │     │  │     ╰─ JsCore([__val[0], __val[1]])
│  │  │     │  ╰─ Scope(Map())
│  │  │     ├─ $GroupF
│  │  │     │  ├─ Grouped
│  │  │     │  │  ╰─ Name("f0" -> { "$sum": { "$literal": NumberInt("1") } })
│  │  │     │  ╰─ By({ "$literal": null })
│  │  │     ├─ $MapF
│  │  │     │  ├─ JavaScript(function (key, value) { return [null, { "left": [], "right": [value.f0] }] })
│  │  │     │  ╰─ Scope(Map())
│  │  │     ╰─ $ReduceF
│  │  │        ├─ JavaScript(function (key, values) {
│  │  │        │               var result = { "left": [], "right": [] };
│  │  │        │               values.forEach(
│  │  │        │                 function (value) {
│  │  │        │                   result.left = result.left.concat(value.left);
│  │  │        │                   result.right = result.right.concat(value.right)
│  │  │        │                 });
│  │  │        │               return result
│  │  │        │             })
│  │  │        ╰─ Scope(Map())
│  │  ├─ $MatchF
│  │  │  ╰─ Doc
│  │  │     ├─ NotExpr($left -> Size(0))
│  │  │     ╰─ NotExpr($right -> Size(0))
│  │  ├─ $UnwindF(DocField(BsonField.Name("right")))
│  │  ├─ $UnwindF(DocField(BsonField.Name("left")))
│  │  ├─ $SimpleMapF
│  │  │  ├─ Map
│  │  │  │  ╰─ JsCore([_.left, _.right])
│  │  │  ╰─ Scope(Map())
│  │  ├─ $ProjectF
│  │  │  ├─ Name("0" -> { "$literal": true })
│  │  │  ├─ Name("1" -> { "$arrayElemAt": ["$$ROOT", { "$literal": NumberInt("1") }] })
│  │  │  ├─ Name("src" -> "$$ROOT")
│  │  │  ╰─ IgnoreId
│  │  ├─ $MatchF
│  │  │  ╰─ And
│  │  │     ├─ Doc
│  │  │     │  ╰─ Expr($0 -> Eq(Bool(true)))
│  │  │     ╰─ Doc
│  │  │        ╰─ Expr($1 -> Gt(Int32(10)))
│  │  ├─ $SimpleMapF
│  │  │  ├─ Map
│  │  │  │  ╰─ JsCore([
│  │  │  │            _.src[0][0],
│  │  │  │            (isObject(_.src[0][1]) && (! Array.isArray(_.src[0][1]))) ? _.src[0][1] : undefined,
│  │  │  │            _.src[1] > 10])
│  │  │  ╰─ Scope(Map())
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│  │  │  ╰─ By({ "$literal": null })
│  │  ╰─ $ProjectF
│  │     ├─ Name("_id" -> "$_id")
│  │     ├─ Name("value")
│  │     │  ├─ Name("left" -> "$0")
│  │     │  ├─ Name("right" -> { "$literal": [] })
│  │     │  ╰─ Name("_id" -> "$_id")
│  │     ╰─ IncludeId
│  ╰─ Chain
│     ├─ $ReadF(db; zips)
│     ├─ $SimpleMapF
│     │  ├─ Map
│     │  │  ╰─ Let(__val)
│     │  │     ├─ JsCore([_._id, _])
│     │  │     ╰─ JsCore([__val[0], __val[1]])
│     │  ╰─ Scope(Map())
│     ├─ $MapF
│     │  ├─ JavaScript(function (key, value) { return [null, { "left": [], "right": [value] }] })
│     │  ╰─ Scope(Map())
│     ╰─ $ReduceF
│        ├─ JavaScript(function (key, values) {
│        │               var result = { "left": [], "right": [] };
│        │               values.forEach(
│        │                 function (value) {
│        │                   result.left = result.left.concat(value.left);
│        │                   result.right = result.right.concat(value.right)
│        │                 });
│        │               return result
│        │             })
│        ╰─ Scope(Map())
├─ $MatchF
│  ╰─ Doc
│     ├─ NotExpr($left -> Size(0))
│     ╰─ NotExpr($right -> Size(0))
├─ $UnwindF(DocField(BsonField.Name("right")))
├─ $UnwindF(DocField(BsonField.Name("left")))
├─ $SimpleMapF
│  ├─ Map
│  │  ╰─ JsCore([_.left, _.right])
│  ╰─ Scope(Map())
├─ $ProjectF
│  ├─ Name("0" -> { "$literal": true })
│  ├─ Name("src" -> "$$ROOT")
│  ╰─ IgnoreId
├─ $MatchF
│  ╰─ Doc
│     ╰─ Expr($0 -> Eq(Bool(true)))
├─ $SimpleMapF
│  ├─ Map
│  │  ╰─ Obj
│  │     ├─ Key(f0: _.src[0][1].city)
│  │     ╰─ Key(b0: [
│  │            (isObject(_.src[1][1]) && (! Array.isArray(_.src[1][1]))) ? _.src[1][1].city : undefined])
│  ╰─ Scope(Map())
├─ $GroupF
│  ├─ Grouped
│  │  ╰─ Name("f0" -> { "$first": "$f0" })
│  ╰─ By
│     ╰─ Name("0" -> "$b0")
╰─ $ProjectF
   ├─ Name("value" -> "$f0")
   ╰─ ExcludeId