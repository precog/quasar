Chain
├─ $FoldLeftF
│  ├─ Chain
│  │  ├─ $ReadF(db; user_comments)
│  │  ├─ $SimpleMapF
│  │  │  ├─ Map
│  │  │  │  ╰─ Let(__val)
│  │  │  │     ├─ JsCore([_._id, _])
│  │  │  │     ╰─ JsCore([
│  │  │  │               __val[0],
│  │  │  │               __val[1],
│  │  │  │               [
│  │  │  │                 __val[0],
│  │  │  │                 (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].comments : undefined]])
│  │  │  ╰─ Scope(Map())
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│  │  │  ╰─ By({ "$literal": null })
│  │  ╰─ $ProjectF
│  │     ├─ Name("_id" -> "$_id")
│  │     ├─ Name("value")
│  │     │  ├─ Name("left" -> "$0")
│  │     │  ├─ Name("right" -> { "$literal": [] })
│  │     │  ╰─ Name("_id" -> "$_id")
│  │     ╰─ IncludeId
│  ╰─ Chain
│     ├─ $ReadF(db; user_comments)
│     ├─ $SimpleMapF
│     │  ├─ Map
│     │  │  ╰─ Let(__val)
│     │  │     ├─ JsCore([_._id, _])
│     │  │     ╰─ JsCore([
│     │  │               __val[0],
│     │  │               __val[1],
│     │  │               [
│     │  │                 __val[0],
│     │  │                 (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].comments : undefined]])
│     │  ╰─ Scope(Map())
│     ├─ $ProjectF
│     │  ├─ Name("s" -> { "$arrayElemAt": ["$$ROOT", { "$literal": NumberInt("2") }] })
│     │  ├─ Name("f" -> {
│     │  │       "$cond": [
│     │  │         {
│     │  │           "$and": [
│     │  │             {
│     │  │               "$lte": [
│     │  │                 { "$literal": [] },
│     │  │                 {
│     │  │                   "$arrayElemAt": [
│     │  │                     { "$arrayElemAt": ["$$ROOT", { "$literal": NumberInt("2") }] },
│     │  │                     { "$literal": NumberInt("1") }]
│     │  │                 }]
│     │  │             },
│     │  │             {
│     │  │               "$lt": [
│     │  │                 {
│     │  │                   "$arrayElemAt": [
│     │  │                     { "$arrayElemAt": ["$$ROOT", { "$literal": NumberInt("2") }] },
│     │  │                     { "$literal": NumberInt("1") }]
│     │  │                 },
│     │  │                 { "$literal": BinData(0, "") }]
│     │  │             }]
│     │  │         },
│     │  │         {
│     │  │           "$arrayElemAt": [
│     │  │             { "$arrayElemAt": ["$$ROOT", { "$literal": NumberInt("2") }] },
│     │  │             { "$literal": NumberInt("1") }]
│     │  │         },
│     │  │         { "$literal": undefined }]
│     │  │     })
│     │  ╰─ IgnoreId
│     ├─ $SimpleMapF
│     │  ├─ SubMap
│     │  │  ├─ JsCore(_.f)
│     │  │  ╰─ Let(m)
│     │  │     ├─ JsCore(_.f)
│     │  │     ╰─ Call
│     │  │        ├─ JsCore(Object.keys(m).map)
│     │  │        ╰─ Fun(Name(k))
│     │  │           ╰─ JsCore([k, m[k]])
│     │  ├─ Flatten
│     │  │  ╰─ JsCore(_.f)
│     │  ├─ Map
│     │  │  ╰─ JsCore([
│     │  │            _.f[1].id,
│     │  │            (new RegExp("^.*Dr.*$", "m")).test(_.f[1].id),
│     │  │            [_.f[0], _.s[0], _.f[1].replyTo]])
│     │  ╰─ Scope(Map())
│     ├─ $ProjectF
│     │  ├─ Name("s" -> "$$ROOT")
│     │  ├─ Name("f" -> {
│     │  │       "$cond": [
│     │  │         {
│     │  │           "$and": [
│     │  │             {
│     │  │               "$lte": [
│     │  │                 { "$literal": [] },
│     │  │                 {
│     │  │                   "$arrayElemAt": [
│     │  │                     { "$arrayElemAt": ["$$ROOT", { "$literal": NumberInt("2") }] },
│     │  │                     { "$literal": NumberInt("2") }]
│     │  │                 }]
│     │  │             },
│     │  │             {
│     │  │               "$lt": [
│     │  │                 {
│     │  │                   "$arrayElemAt": [
│     │  │                     { "$arrayElemAt": ["$$ROOT", { "$literal": NumberInt("2") }] },
│     │  │                     { "$literal": NumberInt("2") }]
│     │  │                 },
│     │  │                 { "$literal": BinData(0, "") }]
│     │  │             }]
│     │  │         },
│     │  │         {
│     │  │           "$arrayElemAt": [
│     │  │             { "$arrayElemAt": ["$$ROOT", { "$literal": NumberInt("2") }] },
│     │  │             { "$literal": NumberInt("2") }]
│     │  │         },
│     │  │         { "$literal": undefined }]
│     │  │     })
│     │  ╰─ IgnoreId
│     ├─ $SimpleMapF
│     │  ├─ Flatten
│     │  │  ╰─ JsCore(_.f)
│     │  ├─ Map
│     │  │  ╰─ JsCore([
│     │  │            isString(_.s[0]) ? _.s[1] : undefined,
│     │  │            (new RegExp("^.*Dr.*$", "m")).test(_.f)])
│     │  ╰─ Scope(Map())
│     ├─ $MapF
│     │  ├─ JavaScript(function (key, value) { return [null, { "left": [], "right": [value] }] })
│     │  ╰─ Scope(Map())
│     ╰─ $ReduceF
│        ├─ JavaScript(function (key, values) {
│        │               var result = { "left": [], "right": [] };
│        │               values.forEach(
│        │                 function (value) {
│        │                   result.left = result.left.concat(value.left);
│        │                   result.right = result.right.concat(value.right)
│        │                 });
│        │               return result
│        │             })
│        ╰─ Scope(Map())
├─ $MatchF
│  ╰─ Doc
│     ├─ NotExpr($left -> Size(0))
│     ╰─ NotExpr($right -> Size(0))
├─ $UnwindF(DocField(BsonField.Name("right")))
├─ $UnwindF(DocField(BsonField.Name("left")))
├─ $SimpleMapF
│  ├─ Map
│  │  ╰─ JsCore([_.left, _.right])
│  ╰─ Scope(Map())
├─ $ProjectF
│  ├─ Name("0" -> { "$literal": true })
│  ├─ Name("1" -> {
│  │       "$arrayElemAt": [
│  │         { "$arrayElemAt": ["$$ROOT", { "$literal": NumberInt("1") }] },
│  │         { "$literal": NumberInt("0") }]
│  │     })
│  ├─ Name("2" -> {
│  │       "$arrayElemAt": [
│  │         { "$arrayElemAt": ["$$ROOT", { "$literal": NumberInt("1") }] },
│  │         { "$literal": NumberInt("1") }]
│  │     })
│  ├─ Name("src" -> "$$ROOT")
│  ╰─ IgnoreId
├─ $MatchF
│  ╰─ And
│     ├─ Doc
│     │  ╰─ Expr($0 -> Eq(Bool(true)))
│     ╰─ Or
│        ├─ Doc
│        │  ╰─ Expr($1 -> Eq(Bool(true)))
│        ╰─ Doc
│           ╰─ Expr($2 -> Eq(Bool(true)))
╰─ $ProjectF
   ├─ Name("value" -> {
   │       "$cond": [
   │         {
   │           "$and": [
   │             {
   │               "$lte": [
   │                 { "$literal": {  } },
   │                 {
   │                   "$arrayElemAt": [
   │                     { "$arrayElemAt": ["$src", { "$literal": NumberInt("0") }] },
   │                     { "$literal": NumberInt("1") }]
   │                 }]
   │             },
   │             {
   │               "$lt": [
   │                 {
   │                   "$arrayElemAt": [
   │                     { "$arrayElemAt": ["$src", { "$literal": NumberInt("0") }] },
   │                     { "$literal": NumberInt("1") }]
   │                 },
   │                 { "$literal": [] }]
   │             }]
   │         },
   │         {
   │           "$arrayElemAt": [
   │             { "$arrayElemAt": ["$src", { "$literal": NumberInt("0") }] },
   │             { "$literal": NumberInt("1") }]
   │         },
   │         { "$literal": undefined }]
   │     })
   ╰─ ExcludeId