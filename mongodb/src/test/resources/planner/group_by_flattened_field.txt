Chain
├─ $FoldLeftF
│  ├─ Chain
│  │  ├─ $ReadF(db; slamengine_commits)
│  │  ├─ $SimpleMapF
│  │  │  ├─ Map
│  │  │  │  ╰─ Let(__val)
│  │  │  │     ├─ JsCore([_._id, _])
│  │  │  │     ╰─ JsCore([
│  │  │  │               __val[0],
│  │  │  │               __val[1],
│  │  │  │               [
│  │  │  │                 __val[0],
│  │  │  │                 (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].parents : undefined],
│  │  │  │               (Array.isArray(
│  │  │  │                 (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].parents : undefined) && (isObject(__val[1]) && (! Array.isArray(__val[1])))) ? __val[1].parents : undefined])
│  │  │  ╰─ Scope(Map())
│  │  ├─ $ProjectF
│  │  │  ├─ Name("0" -> { "$arrayElemAt": ["$$ROOT", { "$literal": NumberInt("3") }] })
│  │  │  ╰─ ExcludeId
│  │  ├─ $SimpleMapF
│  │  │  ├─ Flatten
│  │  │  │  ╰─ JsCore(_["0"])
│  │  │  ╰─ Scope(Map())
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("f0" -> {
│  │  │  │          "$first": {
│  │  │  │            "$cond": [
│  │  │  │              {
│  │  │  │                "$and": [
│  │  │  │                  { "$lte": [{ "$literal": "" }, "$0.sha"] },
│  │  │  │                  { "$lt": ["$0.sha", { "$literal": {  } }] }]
│  │  │  │              },
│  │  │  │              {
│  │  │  │                "$cond": [
│  │  │  │                  {
│  │  │  │                    "$or": [
│  │  │  │                      {
│  │  │  │                        "$lt": [
│  │  │  │                          { "$literal": NumberInt("0") },
│  │  │  │                          { "$literal": NumberInt("0") }]
│  │  │  │                      },
│  │  │  │                      {
│  │  │  │                        "$gt": [{ "$literal": NumberInt("0") }, { "$strLenCP": "$0.sha" }]
│  │  │  │                      }]
│  │  │  │                  },
│  │  │  │                  { "$literal": "" },
│  │  │  │                  {
│  │  │  │                    "$cond": [
│  │  │  │                      {
│  │  │  │                        "$lt": [
│  │  │  │                          { "$literal": NumberInt("1") },
│  │  │  │                          { "$literal": NumberInt("0") }]
│  │  │  │                      },
│  │  │  │                      {
│  │  │  │                        "$substrCP": [
│  │  │  │                          "$0.sha",
│  │  │  │                          { "$literal": NumberInt("0") },
│  │  │  │                          { "$strLenCP": "$0.sha" }]
│  │  │  │                      },
│  │  │  │                      {
│  │  │  │                        "$substrCP": [
│  │  │  │                          "$0.sha",
│  │  │  │                          { "$literal": NumberInt("0") },
│  │  │  │                          { "$literal": NumberInt("1") }]
│  │  │  │                      }]
│  │  │  │                  }]
│  │  │  │              },
│  │  │  │              { "$literal": undefined }]
│  │  │  │          }
│  │  │  │        })
│  │  │  ╰─ By
│  │  │     ╰─ Name("0" -> [
│  │  │             {
│  │  │               "$cond": [
│  │  │                 {
│  │  │                   "$and": [
│  │  │                     { "$lte": [{ "$literal": "" }, "$0.sha"] },
│  │  │                     { "$lt": ["$0.sha", { "$literal": {  } }] }]
│  │  │                 },
│  │  │                 {
│  │  │                   "$cond": [
│  │  │                     {
│  │  │                       "$or": [
│  │  │                         {
│  │  │                           "$lt": [
│  │  │                             { "$literal": NumberInt("0") },
│  │  │                             { "$literal": NumberInt("0") }]
│  │  │                         },
│  │  │                         {
│  │  │                           "$gt": [{ "$literal": NumberInt("0") }, { "$strLenCP": "$0.sha" }]
│  │  │                         }]
│  │  │                     },
│  │  │                     { "$literal": "" },
│  │  │                     {
│  │  │                       "$cond": [
│  │  │                         {
│  │  │                           "$lt": [
│  │  │                             { "$literal": NumberInt("1") },
│  │  │                             { "$literal": NumberInt("0") }]
│  │  │                         },
│  │  │                         {
│  │  │                           "$substrCP": [
│  │  │                             "$0.sha",
│  │  │                             { "$literal": NumberInt("0") },
│  │  │                             { "$strLenCP": "$0.sha" }]
│  │  │                         },
│  │  │                         {
│  │  │                           "$substrCP": [
│  │  │                             "$0.sha",
│  │  │                             { "$literal": NumberInt("0") },
│  │  │                             { "$literal": NumberInt("1") }]
│  │  │                         }]
│  │  │                     }]
│  │  │                 },
│  │  │                 { "$literal": undefined }]
│  │  │             }])
│  │  ├─ $SimpleMapF
│  │  │  ├─ Map
│  │  │  │  ╰─ JsCore([[_._id["0"]], _.f0])
│  │  │  ╰─ Scope(Map())
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│  │  │  ╰─ By
│  │  │     ╰─ Name("0" -> {
│  │  │             "$arrayElemAt": [
│  │  │               { "$arrayElemAt": ["$$ROOT", { "$literal": NumberInt("0") }] },
│  │  │               { "$literal": NumberInt("0") }]
│  │  │           })
│  │  ╰─ $ProjectF
│  │     ├─ Name("_id" -> "$_id")
│  │     ├─ Name("value")
│  │     │  ├─ Name("left" -> "$0")
│  │     │  ├─ Name("right" -> { "$literal": [] })
│  │     │  ╰─ Name("_id" -> "$_id")
│  │     ╰─ IncludeId
│  ╰─ Chain
│     ├─ $ReadF(db; slamengine_commits)
│     ├─ $SimpleMapF
│     │  ├─ Map
│     │  │  ╰─ Let(__val)
│     │  │     ├─ JsCore([_._id, _])
│     │  │     ╰─ JsCore([
│     │  │               __val[0],
│     │  │               __val[1],
│     │  │               [
│     │  │                 __val[0],
│     │  │                 (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].parents : undefined],
│     │  │               (Array.isArray(
│     │  │                 (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].parents : undefined) && (isObject(__val[1]) && (! Array.isArray(__val[1])))) ? __val[1].parents : undefined])
│     │  ╰─ Scope(Map())
│     ├─ $ProjectF
│     │  ├─ Name("s" -> "$$ROOT")
│     │  ├─ Name("f" -> {
│     │  │       "$cond": [
│     │  │         {
│     │  │           "$and": [
│     │  │             {
│     │  │               "$lte": [
│     │  │                 { "$literal": [] },
│     │  │                 {
│     │  │                   "$arrayElemAt": [
│     │  │                     { "$arrayElemAt": ["$$ROOT", { "$literal": NumberInt("2") }] },
│     │  │                     { "$literal": NumberInt("1") }]
│     │  │                 }]
│     │  │             },
│     │  │             {
│     │  │               "$lt": [
│     │  │                 {
│     │  │                   "$arrayElemAt": [
│     │  │                     { "$arrayElemAt": ["$$ROOT", { "$literal": NumberInt("2") }] },
│     │  │                     { "$literal": NumberInt("1") }]
│     │  │                 },
│     │  │                 { "$literal": BinData(0, "") }]
│     │  │             }]
│     │  │         },
│     │  │         {
│     │  │           "$arrayElemAt": [
│     │  │             { "$arrayElemAt": ["$$ROOT", { "$literal": NumberInt("2") }] },
│     │  │             { "$literal": NumberInt("1") }]
│     │  │         },
│     │  │         { "$literal": undefined }]
│     │  │     })
│     │  ╰─ ExcludeId
│     ├─ $SimpleMapF
│     │  ├─ Flatten
│     │  │  ╰─ JsCore(_.f)
│     │  ├─ Map
│     │  │  ╰─ JsCore([
│     │  │            (isObject(_.s[1]) && (! Array.isArray(_.s[1]))) ? _.s[1] : undefined,
│     │  │            [
│     │  │              isString(_.f.sha) ? (0 < 0) ? "" : (1 < 0) ? _.f.sha.substr(0, _.f.sha.length) : _.f.sha.substr(0, 1) : undefined]])
│     │  ╰─ Scope(Map())
│     ├─ $GroupF
│     │  ├─ Grouped
│     │  │  ╰─ Name("f0" -> { "$sum": { "$literal": NumberInt("1") } })
│     │  ╰─ By
│     │     ╰─ Name("0" -> { "$arrayElemAt": ["$$ROOT", { "$literal": NumberInt("1") }] })
│     ├─ $SimpleMapF
│     │  ├─ Map
│     │  │  ╰─ JsCore([[_._id["0"]], _.f0])
│     │  ╰─ Scope(Map())
│     ├─ $MapF
│     │  ├─ JavaScript(function (key, value) { return [{ "0": value[0][0] }, { "left": [], "right": [value] }] })
│     │  ╰─ Scope(Map())
│     ╰─ $ReduceF
│        ├─ JavaScript(function (key, values) {
│        │               var result = { "left": [], "right": [] };
│        │               values.forEach(
│        │                 function (value) {
│        │                   result.left = result.left.concat(value.left);
│        │                   result.right = result.right.concat(value.right)
│        │                 });
│        │               return result
│        │             })
│        ╰─ Scope(Map())
├─ $MatchF
│  ╰─ Doc
│     ├─ NotExpr($left -> Size(0))
│     ╰─ NotExpr($right -> Size(0))
├─ $UnwindF(DocField(BsonField.Name("right")))
├─ $UnwindF(DocField(BsonField.Name("left")))
╰─ $ProjectF
   ├─ Name("0" -> { "$arrayElemAt": ["$left", { "$literal": NumberInt("1") }] })
   ├─ Name("1" -> { "$arrayElemAt": ["$right", { "$literal": NumberInt("1") }] })
   ╰─ ExcludeId