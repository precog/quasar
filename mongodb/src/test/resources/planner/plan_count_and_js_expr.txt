Chain
├─ $FoldLeftF
│  ├─ Chain
│  │  ├─ $ReadF(db; zips)
│  │  ├─ $SimpleMapF
│  │  │  ├─ Map
│  │  │  │  ╰─ Let(__val)
│  │  │  │     ├─ JsCore([_._id, _])
│  │  │  │     ╰─ JsCore([
│  │  │  │               __val[0],
│  │  │  │               (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].city : undefined,
│  │  │  │               (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? NumberLong(__val[1].city.length) : undefined,
│  │  │  │               __val[1]])
│  │  │  ╰─ Scope(Map())
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("f0" -> { "$sum": { "$literal": NumberInt("1") } })
│  │  │  ╰─ By({ "$literal": null })
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("0" -> { "$push": "$f0" })
│  │  │  ╰─ By({ "$literal": null })
│  │  ╰─ $ProjectF
│  │     ├─ Name("_id" -> "$_id")
│  │     ├─ Name("value")
│  │     │  ├─ Name("left" -> "$0")
│  │     │  ├─ Name("right" -> { "$literal": [] })
│  │     │  ╰─ Name("_id" -> "$_id")
│  │     ╰─ IncludeId
│  ╰─ Chain
│     ├─ $ReadF(db; zips)
│     ├─ $SimpleMapF
│     │  ├─ Map
│     │  │  ╰─ Let(__val)
│     │  │     ├─ JsCore([_._id, _])
│     │  │     ╰─ JsCore([
│     │  │               __val[0],
│     │  │               (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].city : undefined,
│     │  │               (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? NumberLong(__val[1].city.length) : undefined,
│     │  │               __val[1]])
│     │  ╰─ Scope(Map())
│     ├─ $MapF
│     │  ├─ JavaScript(function (key, value) { return [null, { "left": [], "right": [value] }] })
│     │  ╰─ Scope(Map())
│     ╰─ $ReduceF
│        ├─ JavaScript(function (key, values) {
│        │               var result = { "left": [], "right": [] };
│        │               values.forEach(
│        │                 function (value) {
│        │                   result.left = result.left.concat(value.left);
│        │                   result.right = result.right.concat(value.right)
│        │                 });
│        │               return result
│        │             })
│        ╰─ Scope(Map())
├─ $MatchF
│  ╰─ Doc
│     ├─ NotExpr($left -> Size(0))
│     ╰─ NotExpr($right -> Size(0))
├─ $UnwindF(DocField(BsonField.Name("right")))
├─ $UnwindF(DocField(BsonField.Name("left")))
╰─ $ProjectF
   ├─ Name("cnt" -> { "$arrayElemAt": [["$left", "$right"], { "$literal": NumberInt("0") }] })
   ├─ Name("1" -> {
   │       "$cond": [
   │         {
   │           "$and": [
   │             {
   │               "$lte": [
   │                 { "$literal": "" },
   │                 {
   │                   "$arrayElemAt": [
   │                     {
   │                       "$arrayElemAt": [["$left", "$right"], { "$literal": NumberInt("1") }]
   │                     },
   │                     { "$literal": NumberInt("1") }]
   │                 }]
   │             },
   │             {
   │               "$lt": [
   │                 {
   │                   "$arrayElemAt": [
   │                     {
   │                       "$arrayElemAt": [["$left", "$right"], { "$literal": NumberInt("1") }]
   │                     },
   │                     { "$literal": NumberInt("1") }]
   │                 },
   │                 { "$literal": {  } }]
   │             }]
   │         },
   │         {
   │           "$arrayElemAt": [
   │             {
   │               "$arrayElemAt": [["$left", "$right"], { "$literal": NumberInt("1") }]
   │             },
   │             { "$literal": NumberInt("2") }]
   │         },
   │         { "$literal": undefined }]
   │     })
   ╰─ IgnoreId