Chain
├─ $FoldLeftF
│  ├─ Chain
│  │  ├─ $ReadF(db; zips)
│  │  ├─ $ProjectF
│  │  │  ├─ Name("identities" -> { "rlp1": "$_id" })
│  │  │  ├─ Name("value" -> "$$ROOT")
│  │  │  ╰─ ExcludeId
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│  │  │  ╰─ By
│  │  │     ╰─ Name("0" -> "$identities.rlp1")
│  │  ╰─ $ProjectF
│  │     ├─ Name("_id" -> "$_id")
│  │     ├─ Name("value")
│  │     │  ├─ Name("right" -> "$0")
│  │     │  ├─ Name("left" -> { "$literal": [] })
│  │     │  ╰─ Name("_id" -> "$_id")
│  │     ╰─ IncludeId
│  ╰─ Chain
│     ├─ $FoldLeftF
│     │  ├─ Chain
│     │  │  ├─ $ReadF(db; zips)
│     │  │  ├─ $ProjectF
│     │  │  │  ├─ Name("0" -> ["$_id", "$$ROOT"])
│     │  │  │  ╰─ ExcludeId
│     │  │  ├─ $ProjectF
│     │  │  │  ├─ Name("identities" -> { "rlp1": { "$arrayElemAt": ["$0", { "$literal": NumberInt("0") }] } })
│     │  │  │  ├─ Name("value" -> {
│     │  │  │  │       "pop": {
│     │  │  │  │         "$cond": [
│     │  │  │  │           {
│     │  │  │  │             "$and": [
│     │  │  │  │               {
│     │  │  │  │                 "$lte": [
│     │  │  │  │                   { "$literal": {  } },
│     │  │  │  │                   { "$arrayElemAt": ["$0", { "$literal": NumberInt("1") }] }]
│     │  │  │  │               },
│     │  │  │  │               {
│     │  │  │  │                 "$lt": [
│     │  │  │  │                   { "$arrayElemAt": ["$0", { "$literal": NumberInt("1") }] },
│     │  │  │  │                   { "$literal": [] }]
│     │  │  │  │               }]
│     │  │  │  │           },
│     │  │  │  │           {
│     │  │  │  │             "$let": {
│     │  │  │  │               "vars": { "el": { "$arrayElemAt": ["$0", { "$literal": NumberInt("1") }] } },
│     │  │  │  │               "in": "$$el.pop"
│     │  │  │  │             }
│     │  │  │  │           },
│     │  │  │  │           { "$literal": undefined }]
│     │  │  │  │       }
│     │  │  │  │     })
│     │  │  │  ╰─ ExcludeId
│     │  │  ├─ $GroupF
│     │  │  │  ├─ Grouped
│     │  │  │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│     │  │  │  ╰─ By({ "$literal": null })
│     │  │  ╰─ $ProjectF
│     │  │     ├─ Name("_id" -> "$_id")
│     │  │     ├─ Name("value")
│     │  │     │  ├─ Name("left" -> "$0")
│     │  │     │  ├─ Name("right" -> { "$literal": [] })
│     │  │     │  ╰─ Name("_id" -> "$_id")
│     │  │     ╰─ IncludeId
│     │  ╰─ Chain
│     │     ├─ $ReadF(db; zips)
│     │     ├─ $GroupF
│     │     │  ├─ Grouped
│     │     │  │  ╰─ Name("f0" -> {
│     │     │  │          "$sum": {
│     │     │  │            "$cond": [
│     │     │  │              {
│     │     │  │                "$and": [
│     │     │  │                  { "$lt": [{ "$literal": null }, "$pop"] },
│     │     │  │                  { "$lt": ["$pop", { "$literal": "" }] }]
│     │     │  │              },
│     │     │  │              "$pop",
│     │     │  │              { "$literal": undefined }]
│     │     │  │          }
│     │     │  │        })
│     │     │  ╰─ By({ "$literal": null })
│     │     ├─ $ProjectF
│     │     │  ├─ Name("1" -> "$f0")
│     │     │  ╰─ ExcludeId
│     │     ├─ $GroupF
│     │     │  ├─ Grouped
│     │     │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│     │     │  ╰─ By({ "$literal": null })
│     │     ├─ $ProjectF
│     │     │  ├─ Name("right" -> "$0")
│     │     │  ├─ Name("left" -> { "$literal": [] })
│     │     │  ├─ Name("_id" -> true)
│     │     │  ╰─ IncludeId
│     │     ╰─ $ReduceF
│     │        ├─ JavaScript(function (key, values) {
│     │        │               var result = { "left": [], "right": [] };
│     │        │               values.forEach(
│     │        │                 function (value) {
│     │        │                   result.left = result.left.concat(value.left);
│     │        │                   result.right = result.right.concat(value.right)
│     │        │                 });
│     │        │               return result
│     │        │             })
│     │        ╰─ Scope(ListMap())
│     ├─ $MatchF
│     │  ╰─ Doc
│     │     ├─ NotExpr($left -> Size(0))
│     │     ╰─ NotExpr($right -> Size(0))
│     ├─ $UnwindF
│     │  ╰─ Path(DocField(BsonField.Name("right")))
│     ├─ $UnwindF
│     │  ╰─ Path(DocField(BsonField.Name("left")))
│     ├─ $ProjectF
│     │  ├─ Name("left" -> "$left")
│     │  ├─ Name("right" -> "$right")
│     │  ╰─ ExcludeId
│     ├─ $MapF
│     │  ├─ JavaScript(function (key, value) {
│     │  │               return [{ "0": value.left.identities.rlp1 }, { "right": [], "left": [value] }]
│     │  │             })
│     │  ╰─ Scope(ListMap())
│     ╰─ $ReduceF
│        ├─ JavaScript(function (key, values) {
│        │               var result = { "right": [], "left": [] };
│        │               values.forEach(
│        │                 function (value) {
│        │                   result.right = result.right.concat(value.right);
│        │                   result.left = result.left.concat(value.left)
│        │                 });
│        │               return result
│        │             })
│        ╰─ Scope(ListMap())
├─ $MatchF
│  ╰─ Doc
│     ├─ NotExpr($right -> Size(0))
│     ╰─ NotExpr($left -> Size(0))
├─ $UnwindF
│  ╰─ Path(DocField(BsonField.Name("left")))
├─ $UnwindF
│  ╰─ Path(DocField(BsonField.Name("right")))
╰─ $SimpleMapF
   ├─ Map
   │  ╰─ Obj
   │     ╰─ Key(__quasar_mongodb_sigil)
   │        ╰─ SpliceObjects
   │           ├─ JsCore(_.left.left.value)
   │           ├─ JsCore(_.left.right)
   │           ╰─ Obj
   │              ╰─ Key(2: (isNumber(
   │                     (isObject(_.right.value) && (! Array.isArray(_.right.value))) ? _.right.value.pop : undefined) || ((((isObject(_.right.value) && (! Array.isArray(_.right.value))) ? _.right.value.pop : undefined) instanceof NumberInt) || (((isObject(_.right.value) && (! Array.isArray(_.right.value))) ? _.right.value.pop : undefined) instanceof NumberLong))) ? _.right.value.pop / 1000 : undefined)
   ╰─ Scope(ListMap())