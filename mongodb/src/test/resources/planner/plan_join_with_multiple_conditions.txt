Chain
├─ $FoldLeftF
│  ├─ Chain
│  │  ├─ $ReadF(db; slamengine_commits)
│  │  ├─ $MatchF
│  │  │  ╰─ And
│  │  │     ├─ Doc
│  │  │     │  ╰─ CondExpr($parents -> ElemMatch(\/-(Exists(true))))
│  │  │     ╰─ Doc
│  │  │        ╰─ CondExpr($author -> Type(Doc))
│  │  ├─ $ProjectF
│  │  │  ├─ Name("0" -> {
│  │  │  │       "$cond": [
│  │  │  │         {
│  │  │  │           "$and": [
│  │  │  │             {
│  │  │  │               "$lte": [
│  │  │  │                 { "$literal": {  } },
│  │  │  │                 { "$arrayElemAt": ["$parents", { "$literal": NumberInt("0") }] }]
│  │  │  │             },
│  │  │  │             {
│  │  │  │               "$lt": [
│  │  │  │                 { "$arrayElemAt": ["$parents", { "$literal": NumberInt("0") }] },
│  │  │  │                 { "$literal": [] }]
│  │  │  │             }]
│  │  │  │         },
│  │  │  │         { "$literal": true },
│  │  │  │         { "$literal": false }]
│  │  │  │     })
│  │  │  ├─ Name("1" -> {
│  │  │  │       "$cond": [
│  │  │  │         {
│  │  │  │           "$and": [
│  │  │  │             { "$lte": [{ "$literal": [] }, "$parents"] },
│  │  │  │             { "$lt": ["$parents", { "$literal": BinData(0, "") }] }]
│  │  │  │         },
│  │  │  │         { "$literal": true },
│  │  │  │         { "$literal": false }]
│  │  │  │     })
│  │  │  ├─ Name("2" -> {
│  │  │  │       "$cond": [
│  │  │  │         {
│  │  │  │           "$and": [
│  │  │  │             { "$lte": [{ "$literal": {  } }, "$author"] },
│  │  │  │             { "$lt": ["$author", { "$literal": [] }] }]
│  │  │  │         },
│  │  │  │         { "$literal": true },
│  │  │  │         { "$literal": false }]
│  │  │  │     })
│  │  │  ├─ Name("src" -> "$$ROOT")
│  │  │  ╰─ ExcludeId
│  │  ├─ $MatchF
│  │  │  ╰─ And
│  │  │     ├─ Doc
│  │  │     │  ╰─ CondExpr($0 -> Eq(Bool(true)))
│  │  │     ├─ Doc
│  │  │     │  ╰─ CondExpr($1 -> Eq(Bool(true)))
│  │  │     ╰─ Doc
│  │  │        ╰─ CondExpr($2 -> Eq(Bool(true)))
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("0" -> { "$push": "$src" })
│  │  │  ╰─ By
│  │  │     ├─ Name("0" -> {
│  │  │     │       "$let": {
│  │  │     │         "vars": {
│  │  │     │           "el": { "$arrayElemAt": ["$src.parents", { "$literal": NumberInt("0") }] }
│  │  │     │         },
│  │  │     │         "in": "$$el.sha"
│  │  │     │       }
│  │  │     │     })
│  │  │     ╰─ Name("1" -> "$src.author.login")
│  │  ╰─ $ProjectF
│  │     ├─ Name("_id" -> "$_id")
│  │     ├─ Name("value")
│  │     │  ├─ Name("left" -> "$0")
│  │     │  ├─ Name("right" -> { "$literal": [] })
│  │     │  ╰─ Name("_id" -> "$_id")
│  │     ╰─ IncludeId
│  ╰─ Chain
│     ├─ $ReadF(db; slamengine_commits)
│     ├─ $MatchF
│     │  ╰─ Doc
│     │     ╰─ CondExpr($author -> Type(Doc))
│     ├─ $ProjectF
│     │  ├─ Name("0" -> {
│     │  │       "$cond": [
│     │  │         {
│     │  │           "$and": [
│     │  │             { "$lte": [{ "$literal": {  } }, "$author"] },
│     │  │             { "$lt": ["$author", { "$literal": [] }] }]
│     │  │         },
│     │  │         { "$literal": true },
│     │  │         { "$literal": false }]
│     │  │     })
│     │  ├─ Name("src" -> "$$ROOT")
│     │  ╰─ ExcludeId
│     ├─ $MatchF
│     │  ╰─ Doc
│     │     ╰─ CondExpr($0 -> Eq(Bool(true)))
│     ├─ $MapF
│     │  ├─ JavaScript(function (key, value) {
│     │  │               return [
│     │  │                 { "0": value.src.sha, "1": value.src.author.login },
│     │  │                 { "left": [], "right": [value.src] }]
│     │  │             })
│     │  ╰─ Scope(ListMap())
│     ╰─ $ReduceF
│        ├─ JavaScript(function (key, values) {
│        │               var result = { "left": [], "right": [] };
│        │               values.forEach(
│        │                 function (value) {
│        │                   result.left = result.left.concat(value.left);
│        │                   result.right = result.right.concat(value.right)
│        │                 });
│        │               return result
│        │             })
│        ╰─ Scope(ListMap())
├─ $MatchF
│  ╰─ Doc
│     ├─ NotCondExpr($left -> Size(0))
│     ╰─ NotCondExpr($right -> Size(0))
├─ $UnwindF
│  ╰─ Path(DocField(BsonField.Name("right")))
├─ $UnwindF
│  ╰─ Path(DocField(BsonField.Name("left")))
╰─ $ProjectF
   ├─ Name("child" -> {
   │       "$cond": [
   │         {
   │           "$and": [
   │             { "$lte": [{ "$literal": {  } }, "$left"] },
   │             { "$lt": ["$left", { "$literal": [] }] }]
   │         },
   │         "$left.sha",
   │         { "$literal": undefined }]
   │     })
   ├─ Name("c_auth" -> {
   │       "$cond": [
   │         {
   │           "$and": [
   │             { "$lte": [{ "$literal": {  } }, "$left"] },
   │             { "$lt": ["$left", { "$literal": [] }] }]
   │         },
   │         {
   │           "$cond": [
   │             {
   │               "$and": [
   │                 { "$lte": [{ "$literal": {  } }, "$left.author"] },
   │                 { "$lt": ["$left.author", { "$literal": [] }] }]
   │             },
   │             "$left.author.login",
   │             { "$literal": undefined }]
   │         },
   │         { "$literal": undefined }]
   │     })
   ├─ Name("parent" -> {
   │       "$cond": [
   │         {
   │           "$and": [
   │             { "$lte": [{ "$literal": {  } }, "$right"] },
   │             { "$lt": ["$right", { "$literal": [] }] }]
   │         },
   │         "$right.sha",
   │         { "$literal": undefined }]
   │     })
   ├─ Name("p_auth" -> {
   │       "$cond": [
   │         {
   │           "$and": [
   │             { "$lte": [{ "$literal": {  } }, "$right"] },
   │             { "$lt": ["$right", { "$literal": [] }] }]
   │         },
   │         {
   │           "$cond": [
   │             {
   │               "$and": [
   │                 { "$lte": [{ "$literal": {  } }, "$right.author"] },
   │                 { "$lt": ["$right.author", { "$literal": [] }] }]
   │             },
   │             "$right.author.login",
   │             { "$literal": undefined }]
   │         },
   │         { "$literal": undefined }]
   │     })
   ╰─ ExcludeId