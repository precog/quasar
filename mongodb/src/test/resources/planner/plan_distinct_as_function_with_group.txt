Chain
├─ $FoldLeftF
│  ├─ Chain
│  │  ├─ $ReadF(db; zips)
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("f0" -> {
│  │  │  │          "$first": {
│  │  │  │            "$cond": [
│  │  │  │              {
│  │  │  │                "$and": [
│  │  │  │                  { "$lte": [{ "$literal": {  } }, "$$ROOT"] },
│  │  │  │                  { "$lt": ["$$ROOT", { "$literal": [] }] }]
│  │  │  │              },
│  │  │  │              "$state",
│  │  │  │              { "$literal": undefined }]
│  │  │  │          }
│  │  │  │        })
│  │  │  ╰─ By
│  │  │     ╰─ Name("0" -> [
│  │  │             {
│  │  │               "$cond": [
│  │  │                 {
│  │  │                   "$and": [
│  │  │                     { "$lte": [{ "$literal": {  } }, "$$ROOT"] },
│  │  │                     { "$lt": ["$$ROOT", { "$literal": [] }] }]
│  │  │                 },
│  │  │                 "$state",
│  │  │                 { "$literal": undefined }]
│  │  │             }])
│  │  ├─ $SimpleMapF
│  │  │  ├─ Map
│  │  │  │  ╰─ JsCore([[_._id["0"]], _.f0])
│  │  │  ╰─ Scope(Map())
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│  │  │  ╰─ By
│  │  │     ╰─ Name("0" -> {
│  │  │             "$arrayElemAt": [
│  │  │               { "$arrayElemAt": ["$$ROOT", { "$literal": NumberInt("0") }] },
│  │  │               { "$literal": NumberInt("0") }]
│  │  │           })
│  │  ╰─ $ProjectF
│  │     ├─ Name("_id" -> "$_id")
│  │     ├─ Name("value")
│  │     │  ├─ Name("left" -> "$0")
│  │     │  ├─ Name("right" -> { "$literal": [] })
│  │     │  ╰─ Name("_id" -> "$_id")
│  │     ╰─ IncludeId
│  ╰─ Chain
│     ├─ $ReadF(db; zips)
│     ├─ $GroupF
│     │  ├─ Grouped
│     │  ╰─ By
│     │     ├─ Name("0" -> {
│     │     │       "$cond": [
│     │     │         {
│     │     │           "$and": [
│     │     │             { "$lte": [{ "$literal": {  } }, "$$ROOT"] },
│     │     │             { "$lt": ["$$ROOT", { "$literal": [] }] }]
│     │     │         },
│     │     │         "$city",
│     │     │         { "$literal": undefined }]
│     │     │     })
│     │     ╰─ Name("1" -> [
│     │             {
│     │               "$cond": [
│     │                 {
│     │                   "$and": [
│     │                     { "$lte": [{ "$literal": {  } }, "$$ROOT"] },
│     │                     { "$lt": ["$$ROOT", { "$literal": [] }] }]
│     │                 },
│     │                 "$state",
│     │                 { "$literal": undefined }]
│     │             }])
│     ├─ $ProjectF
│     │  ├─ Name("f0" -> "$_id.0")
│     │  ╰─ IgnoreId
│     ├─ $SimpleMapF
│     │  ├─ Map
│     │  │  ╰─ JsCore([[_._id["0"], _._id["1"]], _.f0])
│     │  ╰─ Scope(Map())
│     ├─ $GroupF
│     │  ├─ Grouped
│     │  │  ╰─ Name("f0" -> { "$sum": { "$literal": NumberInt("1") } })
│     │  ╰─ By
│     │     ╰─ Name("0" -> {
│     │             "$arrayElemAt": [
│     │               { "$arrayElemAt": ["$$ROOT", { "$literal": NumberInt("0") }] },
│     │               { "$literal": NumberInt("1") }]
│     │           })
│     ├─ $SimpleMapF
│     │  ├─ Map
│     │  │  ╰─ JsCore([[_._id["0"]], _.f0])
│     │  ╰─ Scope(Map())
│     ├─ $MapF
│     │  ├─ JavaScript(function (key, value) { return [{ "0": value[0][0] }, { "left": [], "right": [value] }] })
│     │  ╰─ Scope(Map())
│     ╰─ $ReduceF
│        ├─ JavaScript(function (key, values) {
│        │               var result = { "left": [], "right": [] };
│        │               values.forEach(
│        │                 function (value) {
│        │                   result.left = result.left.concat(value.left);
│        │                   result.right = result.right.concat(value.right)
│        │                 });
│        │               return result
│        │             })
│        ╰─ Scope(Map())
├─ $MatchF
│  ╰─ Doc
│     ├─ NotExpr($left -> Size(0))
│     ╰─ NotExpr($right -> Size(0))
├─ $UnwindF(DocField(BsonField.Name("right")))
├─ $UnwindF(DocField(BsonField.Name("left")))
╰─ $ProjectF
   ├─ Name("state" -> { "$arrayElemAt": ["$left", { "$literal": NumberInt("1") }] })
   ├─ Name("1" -> { "$arrayElemAt": ["$right", { "$literal": NumberInt("1") }] })
   ╰─ ExcludeId