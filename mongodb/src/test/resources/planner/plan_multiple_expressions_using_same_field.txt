Chain
├─ $FoldLeftF
│  ├─ Chain
│  │  ├─ $FoldLeftF
│  │  │  ├─ Chain
│  │  │  │  ├─ $ReadF(db; zips)
│  │  │  │  ├─ $SimpleMapF
│  │  │  │  │  ├─ Map
│  │  │  │  │  │  ╰─ Let(__val)
│  │  │  │  │  │     ├─ JsCore([_._id, _])
│  │  │  │  │  │     ╰─ JsCore([
│  │  │  │  │  │               __val[0],
│  │  │  │  │  │               __val[1],
│  │  │  │  │  │               [
│  │  │  │  │  │                 __val[0],
│  │  │  │  │  │                 (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].pop : undefined,
│  │  │  │  │  │                 (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].pop / 1000 : undefined]])
│  │  │  │  │  ╰─ Scope(Map())
│  │  │  │  ├─ $GroupF
│  │  │  │  │  ├─ Grouped
│  │  │  │  │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│  │  │  │  │  ╰─ By({ "$literal": null })
│  │  │  │  ╰─ $ProjectF
│  │  │  │     ├─ Name("_id" -> "$_id")
│  │  │  │     ├─ Name("value")
│  │  │  │     │  ├─ Name("left" -> "$0")
│  │  │  │     │  ├─ Name("right" -> { "$literal": [] })
│  │  │  │     │  ╰─ Name("_id" -> "$_id")
│  │  │  │     ╰─ IncludeId
│  │  │  ╰─ Chain
│  │  │     ├─ $ReadF(db; zips)
│  │  │     ├─ $SimpleMapF
│  │  │     │  ├─ Map
│  │  │     │  │  ╰─ Let(__val)
│  │  │     │  │     ├─ Let(__val)
│  │  │     │  │     │  ├─ JsCore([_._id, _])
│  │  │     │  │     │  ╰─ JsCore([
│  │  │     │  │     │            __val[0],
│  │  │     │  │     │            __val[1],
│  │  │     │  │     │            [
│  │  │     │  │     │              __val[0],
│  │  │     │  │     │              (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].pop : undefined,
│  │  │     │  │     │              (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].pop / 1000 : undefined]])
│  │  │     │  │     ╰─ Obj
│  │  │     │  │        ╰─ Key(f0: ((isNumber(
│  │  │     │  │               (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].pop : undefined) || ((((isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].pop : undefined) instanceof NumberInt) || (((isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].pop : undefined) instanceof NumberLong))) && (isObject(__val[1]) && (! Array.isArray(__val[1])))) ? __val[1].pop : undefined)
│  │  │     │  ╰─ Scope(Map())
│  │  │     ├─ $GroupF
│  │  │     │  ├─ Grouped
│  │  │     │  │  ╰─ Name("f0" -> { "$sum": "$f0" })
│  │  │     │  ╰─ By({ "$literal": null })
│  │  │     ├─ $MapF
│  │  │     │  ├─ JavaScript(function (key, value) { return [null, { "left": [], "right": [value.f0] }] })
│  │  │     │  ╰─ Scope(Map())
│  │  │     ╰─ $ReduceF
│  │  │        ├─ JavaScript(function (key, values) {
│  │  │        │               var result = { "left": [], "right": [] };
│  │  │        │               values.forEach(
│  │  │        │                 function (value) {
│  │  │        │                   result.left = result.left.concat(value.left);
│  │  │        │                   result.right = result.right.concat(value.right)
│  │  │        │                 });
│  │  │        │               return result
│  │  │        │             })
│  │  │        ╰─ Scope(Map())
│  │  ├─ $MatchF
│  │  │  ╰─ Doc
│  │  │     ├─ NotExpr($left -> Size(0))
│  │  │     ╰─ NotExpr($right -> Size(0))
│  │  ├─ $UnwindF(DocField(BsonField.Name("right")))
│  │  ├─ $UnwindF(DocField(BsonField.Name("left")))
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("0" -> { "$push": { "$let": { "vars": { "a": ["$left", "$right"] }, "in": "$$a" } } })
│  │  │  ╰─ By({ "$literal": null })
│  │  ╰─ $ProjectF
│  │     ├─ Name("_id" -> "$_id")
│  │     ├─ Name("value")
│  │     │  ├─ Name("left" -> "$0")
│  │     │  ├─ Name("right" -> { "$literal": [] })
│  │     │  ╰─ Name("_id" -> "$_id")
│  │     ╰─ IncludeId
│  ╰─ Chain
│     ├─ $ReadF(db; zips)
│     ├─ $SimpleMapF
│     │  ├─ Map
│     │  │  ╰─ Let(__val)
│     │  │     ├─ JsCore([_._id, _])
│     │  │     ╰─ JsCore([
│     │  │               __val[0],
│     │  │               __val[1],
│     │  │               [
│     │  │                 __val[0],
│     │  │                 (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].pop : undefined,
│     │  │                 (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].pop / 1000 : undefined]])
│     │  ╰─ Scope(Map())
│     ├─ $MapF
│     │  ├─ JavaScript(function (key, value) { return [null, { "left": [], "right": [value] }] })
│     │  ╰─ Scope(Map())
│     ╰─ $ReduceF
│        ├─ JavaScript(function (key, values) {
│        │               var result = { "left": [], "right": [] };
│        │               values.forEach(
│        │                 function (value) {
│        │                   result.left = result.left.concat(value.left);
│        │                   result.right = result.right.concat(value.right)
│        │                 });
│        │               return result
│        │             })
│        ╰─ Scope(Map())
├─ $MatchF
│  ╰─ Doc
│     ├─ NotExpr($left -> Size(0))
│     ╰─ NotExpr($right -> Size(0))
├─ $UnwindF(DocField(BsonField.Name("right")))
├─ $UnwindF(DocField(BsonField.Name("left")))
╰─ $SimpleMapF
   ├─ Map
   │  ╰─ Let(__val)
   │     ├─ Arr
   │     │  ├─ Arr
   │     │  │  ├─ JsCore(_.left[0][0])
   │     │  │  ├─ Obj
   │     │  │  │  ╰─ Key(pop: (isObject(_.left[0][1]) && (! Array.isArray(_.left[0][1]))) ? _.left[0][1].pop : undefined)
   │     │  │  ╰─ Obj
   │     │  │     ╰─ Key(1: _.left[1])
   │     │  ╰─ JsCore(_.right[2])
   │     ╰─ SpliceObjects
   │        ├─ SpliceObjects
   │        │  ├─ JsCore(__val[0][1])
   │        │  ╰─ JsCore(__val[0][2])
   │        ╰─ Obj
   │           ╰─ Key(2: ((isNumber(__val[1][1]) || ((__val[1][1] instanceof NumberInt) || (__val[1][1] instanceof NumberLong))) || (__val[1][1] instanceof Date)) ? __val[1][2] : undefined)
   ╰─ Scope(Map())