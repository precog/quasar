Chain
├─ $FoldLeftF
│  ├─ Chain
│  │  ├─ $FoldLeftF
│  │  │  ├─ Chain
│  │  │  │  ├─ $ReadF(db; zips)
│  │  │  │  ├─ $ProjectF
│  │  │  │  │  ├─ Name("0" -> ["$_id", "$$ROOT"])
│  │  │  │  │  ╰─ ExcludeId
│  │  │  │  ├─ $ProjectF
│  │  │  │  │  ├─ Name("identities" -> {
│  │  │  │  │  │       "rlp1": { "$arrayElemAt": ["$0", { "$literal": NumberInt("0") }] },
│  │  │  │  │  │       "rlp8_k0": {
│  │  │  │  │  │         "$cond": [
│  │  │  │  │  │           {
│  │  │  │  │  │             "$and": [
│  │  │  │  │  │               {
│  │  │  │  │  │                 "$lte": [
│  │  │  │  │  │                   { "$literal": {  } },
│  │  │  │  │  │                   { "$arrayElemAt": ["$0", { "$literal": NumberInt("1") }] }]
│  │  │  │  │  │               },
│  │  │  │  │  │               {
│  │  │  │  │  │                 "$lt": [
│  │  │  │  │  │                   { "$arrayElemAt": ["$0", { "$literal": NumberInt("1") }] },
│  │  │  │  │  │                   { "$literal": [] }]
│  │  │  │  │  │               }]
│  │  │  │  │  │           },
│  │  │  │  │  │           {
│  │  │  │  │  │             "$let": {
│  │  │  │  │  │               "vars": { "el": { "$arrayElemAt": ["$0", { "$literal": NumberInt("1") }] } },
│  │  │  │  │  │               "in": "$$el.city"
│  │  │  │  │  │             }
│  │  │  │  │  │           },
│  │  │  │  │  │           { "$literal": undefined }]
│  │  │  │  │  │       }
│  │  │  │  │  │     })
│  │  │  │  │  ├─ Name("value" -> {
│  │  │  │  │  │       "$cond": [
│  │  │  │  │  │         {
│  │  │  │  │  │           "$and": [
│  │  │  │  │  │             {
│  │  │  │  │  │               "$lte": [
│  │  │  │  │  │                 { "$literal": {  } },
│  │  │  │  │  │                 { "$arrayElemAt": ["$0", { "$literal": NumberInt("1") }] }]
│  │  │  │  │  │             },
│  │  │  │  │  │             {
│  │  │  │  │  │               "$lt": [
│  │  │  │  │  │                 { "$arrayElemAt": ["$0", { "$literal": NumberInt("1") }] },
│  │  │  │  │  │                 { "$literal": [] }]
│  │  │  │  │  │             }]
│  │  │  │  │  │         },
│  │  │  │  │  │         { "$arrayElemAt": ["$0", { "$literal": NumberInt("1") }] },
│  │  │  │  │  │         { "$literal": undefined }]
│  │  │  │  │  │     })
│  │  │  │  │  ╰─ ExcludeId
│  │  │  │  ├─ $GroupF
│  │  │  │  │  ├─ Grouped
│  │  │  │  │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│  │  │  │  │  ╰─ By
│  │  │  │  │     ╰─ Name("0" -> "$identities.rlp1")
│  │  │  │  ╰─ $ProjectF
│  │  │  │     ├─ Name("_id" -> "$_id")
│  │  │  │     ├─ Name("value")
│  │  │  │     │  ├─ Name("left" -> "$0")
│  │  │  │     │  ├─ Name("right" -> { "$literal": [] })
│  │  │  │     │  ╰─ Name("_id" -> "$_id")
│  │  │  │     ╰─ IncludeId
│  │  │  ╰─ Chain
│  │  │     ├─ $FoldLeftF
│  │  │     │  ├─ Chain
│  │  │     │  │  ├─ $FoldLeftF
│  │  │     │  │  │  ├─ Chain
│  │  │     │  │  │  │  ├─ $ReadF(db; zips)
│  │  │     │  │  │  │  ├─ $ProjectF
│  │  │     │  │  │  │  │  ├─ Name("0" -> ["$_id", "$$ROOT"])
│  │  │     │  │  │  │  │  ╰─ ExcludeId
│  │  │     │  │  │  │  ├─ $ProjectF
│  │  │     │  │  │  │  │  ├─ Name("identities" -> {
│  │  │     │  │  │  │  │  │       "rlp1": { "$arrayElemAt": ["$0", { "$literal": NumberInt("0") }] },
│  │  │     │  │  │  │  │  │       "rlp8_k0": {
│  │  │     │  │  │  │  │  │         "$cond": [
│  │  │     │  │  │  │  │  │           {
│  │  │     │  │  │  │  │  │             "$and": [
│  │  │     │  │  │  │  │  │               {
│  │  │     │  │  │  │  │  │                 "$lte": [
│  │  │     │  │  │  │  │  │                   { "$literal": {  } },
│  │  │     │  │  │  │  │  │                   { "$arrayElemAt": ["$0", { "$literal": NumberInt("1") }] }]
│  │  │     │  │  │  │  │  │               },
│  │  │     │  │  │  │  │  │               {
│  │  │     │  │  │  │  │  │                 "$lt": [
│  │  │     │  │  │  │  │  │                   { "$arrayElemAt": ["$0", { "$literal": NumberInt("1") }] },
│  │  │     │  │  │  │  │  │                   { "$literal": [] }]
│  │  │     │  │  │  │  │  │               }]
│  │  │     │  │  │  │  │  │           },
│  │  │     │  │  │  │  │  │           {
│  │  │     │  │  │  │  │  │             "$let": {
│  │  │     │  │  │  │  │  │               "vars": { "el": { "$arrayElemAt": ["$0", { "$literal": NumberInt("1") }] } },
│  │  │     │  │  │  │  │  │               "in": "$$el.city"
│  │  │     │  │  │  │  │  │             }
│  │  │     │  │  │  │  │  │           },
│  │  │     │  │  │  │  │  │           { "$literal": undefined }]
│  │  │     │  │  │  │  │  │       }
│  │  │     │  │  │  │  │  │     })
│  │  │     │  │  │  │  │  ├─ Name("value" -> {
│  │  │     │  │  │  │  │  │       "$cond": [
│  │  │     │  │  │  │  │  │         {
│  │  │     │  │  │  │  │  │           "$and": [
│  │  │     │  │  │  │  │  │             {
│  │  │     │  │  │  │  │  │               "$lte": [
│  │  │     │  │  │  │  │  │                 { "$literal": {  } },
│  │  │     │  │  │  │  │  │                 { "$arrayElemAt": ["$0", { "$literal": NumberInt("1") }] }]
│  │  │     │  │  │  │  │  │             },
│  │  │     │  │  │  │  │  │             {
│  │  │     │  │  │  │  │  │               "$lt": [
│  │  │     │  │  │  │  │  │                 { "$arrayElemAt": ["$0", { "$literal": NumberInt("1") }] },
│  │  │     │  │  │  │  │  │                 { "$literal": [] }]
│  │  │     │  │  │  │  │  │             }]
│  │  │     │  │  │  │  │  │         },
│  │  │     │  │  │  │  │  │         { "$arrayElemAt": ["$0", { "$literal": NumberInt("1") }] },
│  │  │     │  │  │  │  │  │         { "$literal": undefined }]
│  │  │     │  │  │  │  │  │     })
│  │  │     │  │  │  │  │  ╰─ ExcludeId
│  │  │     │  │  │  │  ├─ $ProjectF
│  │  │     │  │  │  │  │  ├─ Name("identities" -> "$identities")
│  │  │     │  │  │  │  │  ├─ Name("value" -> { "$gt": ["$value.pop", { "$literal": NumberInt("1000") }] })
│  │  │     │  │  │  │  │  ╰─ ExcludeId
│  │  │     │  │  │  │  ├─ $GroupF
│  │  │     │  │  │  │  │  ├─ Grouped
│  │  │     │  │  │  │  │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│  │  │     │  │  │  │  │  ╰─ By
│  │  │     │  │  │  │  │     ╰─ Name("0" -> "$identities.rlp8_k0")
│  │  │     │  │  │  │  ╰─ $ProjectF
│  │  │     │  │  │  │     ├─ Name("_id" -> "$_id")
│  │  │     │  │  │  │     ├─ Name("value")
│  │  │     │  │  │  │     │  ├─ Name("left" -> "$0")
│  │  │     │  │  │  │     │  ├─ Name("right" -> { "$literal": [] })
│  │  │     │  │  │  │     │  ╰─ Name("_id" -> "$_id")
│  │  │     │  │  │  │     ╰─ IncludeId
│  │  │     │  │  │  ╰─ Chain
│  │  │     │  │  │     ├─ $ReadF(db; zips)
│  │  │     │  │  │     ├─ $ProjectF
│  │  │     │  │  │     │  ├─ Name("value" -> {
│  │  │     │  │  │     │  │       "$cond": [
│  │  │     │  │  │     │  │         {
│  │  │     │  │  │     │  │           "$and": [
│  │  │     │  │  │     │  │             {
│  │  │     │  │  │     │  │               "$lte": [
│  │  │     │  │  │     │  │                 { "$literal": {  } },
│  │  │     │  │  │     │  │                 {
│  │  │     │  │  │     │  │                   "$arrayElemAt": [["$_id", "$$ROOT"], { "$literal": NumberInt("1") }]
│  │  │     │  │  │     │  │                 }]
│  │  │     │  │  │     │  │             },
│  │  │     │  │  │     │  │             {
│  │  │     │  │  │     │  │               "$lt": [
│  │  │     │  │  │     │  │                 {
│  │  │     │  │  │     │  │                   "$arrayElemAt": [["$_id", "$$ROOT"], { "$literal": NumberInt("1") }]
│  │  │     │  │  │     │  │                 },
│  │  │     │  │  │     │  │                 { "$literal": [] }]
│  │  │     │  │  │     │  │             }]
│  │  │     │  │  │     │  │         },
│  │  │     │  │  │     │  │         { "$arrayElemAt": [["$_id", "$$ROOT"], { "$literal": NumberInt("1") }] },
│  │  │     │  │  │     │  │         { "$literal": undefined }]
│  │  │     │  │  │     │  │     })
│  │  │     │  │  │     │  ╰─ ExcludeId
│  │  │     │  │  │     ├─ $GroupF
│  │  │     │  │  │     │  ├─ Grouped
│  │  │     │  │  │     │  ╰─ By
│  │  │     │  │  │     │     ╰─ Name("0" -> "$value.city")
│  │  │     │  │  │     ├─ $ProjectF
│  │  │     │  │  │     │  ├─ Name("f0" -> "$_id.0")
│  │  │     │  │  │     │  ╰─ IgnoreId
│  │  │     │  │  │     ├─ $ProjectF
│  │  │     │  │  │     │  ├─ Name("identities" -> { "rlp15_b0": "$_id.0" })
│  │  │     │  │  │     │  ├─ Name("value" -> "$f0")
│  │  │     │  │  │     │  ╰─ ExcludeId
│  │  │     │  │  │     ├─ $MapF
│  │  │     │  │  │     │  ├─ JavaScript(function (key, value) {
│  │  │     │  │  │     │  │               return [{ "0": value.identities.rlp15_b0 }, { "left": [], "right": [value] }]
│  │  │     │  │  │     │  │             })
│  │  │     │  │  │     │  ╰─ Scope(ListMap())
│  │  │     │  │  │     ╰─ $ReduceF
│  │  │     │  │  │        ├─ JavaScript(function (key, values) {
│  │  │     │  │  │        │               var result = { "left": [], "right": [] };
│  │  │     │  │  │        │               values.forEach(
│  │  │     │  │  │        │                 function (value) {
│  │  │     │  │  │        │                   result.left = result.left.concat(value.left);
│  │  │     │  │  │        │                   result.right = result.right.concat(value.right)
│  │  │     │  │  │        │                 });
│  │  │     │  │  │        │               return result
│  │  │     │  │  │        │             })
│  │  │     │  │  │        ╰─ Scope(ListMap())
│  │  │     │  │  ├─ $MatchF
│  │  │     │  │  │  ╰─ Doc
│  │  │     │  │  │     ├─ NotCondExpr($left -> Size(0))
│  │  │     │  │  │     ╰─ NotCondExpr($right -> Size(0))
│  │  │     │  │  ├─ $UnwindF
│  │  │     │  │  │  ╰─ Path(DocField(BsonField.Name("right")))
│  │  │     │  │  ├─ $UnwindF
│  │  │     │  │  │  ╰─ Path(DocField(BsonField.Name("left")))
│  │  │     │  │  ├─ $ProjectF
│  │  │     │  │  │  ├─ Name("left" -> "$left")
│  │  │     │  │  │  ├─ Name("right" -> "$right")
│  │  │     │  │  │  ╰─ ExcludeId
│  │  │     │  │  ├─ $SimpleMapF
│  │  │     │  │  │  ├─ Map
│  │  │     │  │  │  │  ╰─ Obj
│  │  │     │  │  │  │     ├─ Key(identities)
│  │  │     │  │  │  │     │  ╰─ SpliceObjects
│  │  │     │  │  │  │     │     ├─ JsCore(_.left.identities)
│  │  │     │  │  │  │     │     ╰─ JsCore(_.right.identities)
│  │  │     │  │  │  │     ╰─ Key(value)
│  │  │     │  │  │  │        ╰─ Obj
│  │  │     │  │  │  │           ├─ Key(leftAccess29: _.left.value)
│  │  │     │  │  │  │           ╰─ Key(centerAccess30: _.right.value)
│  │  │     │  │  │  ╰─ Scope(ListMap())
│  │  │     │  │  ├─ $GroupF
│  │  │     │  │  │  ├─ Grouped
│  │  │     │  │  │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│  │  │     │  │  │  ╰─ By({ "$literal": null })
│  │  │     │  │  ╰─ $ProjectF
│  │  │     │  │     ├─ Name("_id" -> "$_id")
│  │  │     │  │     ├─ Name("value")
│  │  │     │  │     │  ├─ Name("left" -> "$0")
│  │  │     │  │     │  ├─ Name("right" -> { "$literal": [] })
│  │  │     │  │     │  ╰─ Name("_id" -> "$_id")
│  │  │     │  │     ╰─ IncludeId
│  │  │     │  ╰─ Chain
│  │  │     │     ├─ $ReadF(db; zips)
│  │  │     │     ├─ $ProjectF
│  │  │     │     │  ├─ Name("value" -> {
│  │  │     │     │  │       "$cond": [
│  │  │     │     │  │         {
│  │  │     │     │  │           "$and": [
│  │  │     │     │  │             {
│  │  │     │     │  │               "$lte": [
│  │  │     │     │  │                 { "$literal": {  } },
│  │  │     │     │  │                 {
│  │  │     │     │  │                   "$arrayElemAt": [["$_id", "$$ROOT"], { "$literal": NumberInt("1") }]
│  │  │     │     │  │                 }]
│  │  │     │     │  │             },
│  │  │     │     │  │             {
│  │  │     │     │  │               "$lt": [
│  │  │     │     │  │                 {
│  │  │     │     │  │                   "$arrayElemAt": [["$_id", "$$ROOT"], { "$literal": NumberInt("1") }]
│  │  │     │     │  │                 },
│  │  │     │     │  │                 { "$literal": [] }]
│  │  │     │     │  │             }]
│  │  │     │     │  │         },
│  │  │     │     │  │         { "$arrayElemAt": [["$_id", "$$ROOT"], { "$literal": NumberInt("1") }] },
│  │  │     │     │  │         { "$literal": undefined }]
│  │  │     │     │  │     })
│  │  │     │     │  ╰─ ExcludeId
│  │  │     │     ├─ $GroupF
│  │  │     │     │  ├─ Grouped
│  │  │     │     │  │  ╰─ Name("f0" -> {
│  │  │     │     │  │          "$first": {
│  │  │     │     │  │            "$cond": [
│  │  │     │     │  │              {
│  │  │     │     │  │                "$and": [
│  │  │     │     │  │                  { "$lte": [{ "$literal": "" }, "$value.city"] },
│  │  │     │     │  │                  { "$lt": ["$value.city", { "$literal": {  } }] }]
│  │  │     │     │  │              },
│  │  │     │     │  │              "$value.city",
│  │  │     │     │  │              { "$literal": undefined }]
│  │  │     │     │  │          }
│  │  │     │     │  │        })
│  │  │     │     │  ╰─ By
│  │  │     │     │     ╰─ Name("0" -> "$value.city")
│  │  │     │     ├─ $ProjectF
│  │  │     │     │  ├─ Name("identities" -> { "rlp17_b0": "$_id.0" })
│  │  │     │     │  ├─ Name("value" -> { "$toLower": "$f0" })
│  │  │     │     │  ╰─ ExcludeId
│  │  │     │     ├─ $GroupF
│  │  │     │     │  ├─ Grouped
│  │  │     │     │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│  │  │     │     │  ╰─ By({ "$literal": null })
│  │  │     │     ├─ $ProjectF
│  │  │     │     │  ├─ Name("right" -> "$0")
│  │  │     │     │  ├─ Name("left" -> { "$literal": [] })
│  │  │     │     │  ├─ Name("_id" -> true)
│  │  │     │     │  ╰─ IncludeId
│  │  │     │     ╰─ $ReduceF
│  │  │     │        ├─ JavaScript(function (key, values) {
│  │  │     │        │               var result = { "left": [], "right": [] };
│  │  │     │        │               values.forEach(
│  │  │     │        │                 function (value) {
│  │  │     │        │                   result.left = result.left.concat(value.left);
│  │  │     │        │                   result.right = result.right.concat(value.right)
│  │  │     │        │                 });
│  │  │     │        │               return result
│  │  │     │        │             })
│  │  │     │        ╰─ Scope(ListMap())
│  │  │     ├─ $MatchF
│  │  │     │  ╰─ Doc
│  │  │     │     ├─ NotCondExpr($left -> Size(0))
│  │  │     │     ╰─ NotCondExpr($right -> Size(0))
│  │  │     ├─ $UnwindF
│  │  │     │  ╰─ Path(DocField(BsonField.Name("right")))
│  │  │     ├─ $UnwindF
│  │  │     │  ╰─ Path(DocField(BsonField.Name("left")))
│  │  │     ├─ $ProjectF
│  │  │     │  ├─ Name("0" -> { "$eq": ["$left.identities.rlp15_b0", "$right.identities.rlp17_b0"] })
│  │  │     │  ├─ Name("1" -> { "$eq": ["$left.identities.rlp8_k0", "$right.identities.rlp17_b0"] })
│  │  │     │  ├─ Name("src")
│  │  │     │  │  ├─ Name("left" -> "$left")
│  │  │     │  │  ╰─ Name("right" -> "$right")
│  │  │     │  ╰─ ExcludeId
│  │  │     ├─ $MatchF
│  │  │     │  ╰─ Or
│  │  │     │     ├─ Doc
│  │  │     │     │  ╰─ CondExpr($0 -> Eq(Bool(true)))
│  │  │     │     ╰─ Doc
│  │  │     │        ╰─ CondExpr($1 -> Eq(Bool(true)))
│  │  │     ├─ $MapF
│  │  │     │  ├─ JavaScript(function (key, value) {
│  │  │     │  │               return [
│  │  │     │  │                 {
│  │  │     │  │                   "0": (function (__rez) {
│  │  │     │  │                     for (var __attr in (value.src.left.identities)) if (value.src.left.identities.hasOwnProperty(__attr)) __rez[__attr] = value.src.left.identities[__attr];
│  │  │     │  │                     for (var __attr in (value.src.right.identities)) if (value.src.right.identities.hasOwnProperty(__attr)) __rez[__attr] = value.src.right.identities[__attr];
│  │  │     │  │                     return __rez
│  │  │     │  │                   })(
│  │  │     │  │                     {  }).rlp1
│  │  │     │  │                 },
│  │  │     │  │                 { "left": [], "right": [value.src] }]
│  │  │     │  │             })
│  │  │     │  ╰─ Scope(ListMap())
│  │  │     ╰─ $ReduceF
│  │  │        ├─ JavaScript(function (key, values) {
│  │  │        │               var result = { "left": [], "right": [] };
│  │  │        │               values.forEach(
│  │  │        │                 function (value) {
│  │  │        │                   result.left = result.left.concat(value.left);
│  │  │        │                   result.right = result.right.concat(value.right)
│  │  │        │                 });
│  │  │        │               return result
│  │  │        │             })
│  │  │        ╰─ Scope(ListMap())
│  │  ├─ $MatchF
│  │  │  ╰─ Doc
│  │  │     ├─ NotCondExpr($left -> Size(0))
│  │  │     ╰─ NotCondExpr($right -> Size(0))
│  │  ├─ $UnwindF
│  │  │  ╰─ Path(DocField(BsonField.Name("right")))
│  │  ├─ $UnwindF
│  │  │  ╰─ Path(DocField(BsonField.Name("left")))
│  │  ├─ $SimpleMapF
│  │  │  ├─ Map
│  │  │  │  ╰─ Obj
│  │  │  │     ├─ Key(left)
│  │  │  │     │  ╰─ Obj
│  │  │  │     │     ├─ Key(identities: _.left.identities)
│  │  │  │     │     ╰─ Key(value: _.left.value.pop)
│  │  │  │     ╰─ Key(right)
│  │  │  │        ╰─ Obj
│  │  │  │           ├─ Key(identities)
│  │  │  │           │  ╰─ SpliceObjects
│  │  │  │           │     ├─ JsCore(_.right.left.identities)
│  │  │  │           │     ╰─ JsCore(_.right.right.identities)
│  │  │  │           ╰─ Key(value: _.right.left.value.leftAccess29 ? _.right.left.value.centerAccess30 : _.right.right.value)
│  │  │  ╰─ Scope(ListMap())
│  │  ├─ $ProjectF
│  │  │  ├─ Name("0" -> { "$eq": ["$left.identities.rlp8_k0", "$right.identities.rlp17_b0"] })
│  │  │  ├─ Name("1" -> { "$eq": ["$left.identities.rlp8_k0", "$right.identities.rlp15_b0"] })
│  │  │  ├─ Name("2" -> { "$eq": ["$left.identities.rlp8_k0", "$right.identities.rlp8_k0"] })
│  │  │  ├─ Name("src" -> "$$ROOT")
│  │  │  ╰─ ExcludeId
│  │  ├─ $MatchF
│  │  │  ╰─ Or
│  │  │     ├─ Doc
│  │  │     │  ╰─ CondExpr($0 -> Eq(Bool(true)))
│  │  │     ├─ Doc
│  │  │     │  ╰─ CondExpr($1 -> Eq(Bool(true)))
│  │  │     ╰─ Doc
│  │  │        ╰─ CondExpr($2 -> Eq(Bool(true)))
│  │  ├─ $SimpleMapF
│  │  │  ├─ Map
│  │  │  │  ╰─ Obj
│  │  │  │     ├─ Key(identities)
│  │  │  │     │  ╰─ SpliceObjects
│  │  │  │     │     ├─ JsCore(_.src.left.identities)
│  │  │  │     │     ╰─ JsCore(_.src.right.identities)
│  │  │  │     ╰─ Key(value)
│  │  │  │        ╰─ Obj
│  │  │  │           ╰─ Key(0: ((((isNumber(_.src.left.value) || ((_.src.left.value instanceof NumberInt) || (_.src.left.value instanceof NumberLong))) || isString(_.src.left.value)) || (_.src.left.value instanceof Date)) || ((typeof _.src.left.value) === "boolean")) ? _.src.right.value : undefined)
│  │  │  ╰─ Scope(ListMap())
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│  │  │  ╰─ By({ "$literal": null })
│  │  ╰─ $ProjectF
│  │     ├─ Name("_id" -> "$_id")
│  │     ├─ Name("value")
│  │     │  ├─ Name("left" -> "$0")
│  │     │  ├─ Name("right" -> { "$literal": [] })
│  │     │  ╰─ Name("_id" -> "$_id")
│  │     ╰─ IncludeId
│  ╰─ Chain
│     ├─ $ReadF(db; zips)
│     ├─ $ProjectF
│     │  ├─ Name("value" -> {
│     │  │       "$cond": [
│     │  │         {
│     │  │           "$and": [
│     │  │             { "$lte": [{ "$literal": {  } }, "$$ROOT"] },
│     │  │             { "$lt": ["$$ROOT", { "$literal": [] }] }]
│     │  │         },
│     │  │         "$$ROOT",
│     │  │         { "$literal": undefined }]
│     │  │     })
│     │  ╰─ ExcludeId
│     ├─ $GroupF
│     │  ├─ Grouped
│     │  │  ╰─ Name("f0" -> { "$sum": { "$literal": NumberInt("1") } })
│     │  ╰─ By
│     │     ╰─ Name("0" -> "$value.city")
│     ├─ $ProjectF
│     │  ├─ Name("identities" -> { "rlp23_b0": "$_id.0" })
│     │  ├─ Name("value" -> { "1": "$f0" })
│     │  ╰─ ExcludeId
│     ├─ $GroupF
│     │  ├─ Grouped
│     │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│     │  ╰─ By({ "$literal": null })
│     ├─ $ProjectF
│     │  ├─ Name("right" -> "$0")
│     │  ├─ Name("left" -> { "$literal": [] })
│     │  ├─ Name("_id" -> true)
│     │  ╰─ IncludeId
│     ╰─ $ReduceF
│        ├─ JavaScript(function (key, values) {
│        │               var result = { "left": [], "right": [] };
│        │               values.forEach(
│        │                 function (value) {
│        │                   result.left = result.left.concat(value.left);
│        │                   result.right = result.right.concat(value.right)
│        │                 });
│        │               return result
│        │             })
│        ╰─ Scope(ListMap())
├─ $MatchF
│  ╰─ Doc
│     ├─ NotCondExpr($left -> Size(0))
│     ╰─ NotCondExpr($right -> Size(0))
├─ $UnwindF
│  ╰─ Path(DocField(BsonField.Name("right")))
├─ $UnwindF
│  ╰─ Path(DocField(BsonField.Name("left")))
├─ $ProjectF
│  ├─ Name("0" -> { "$eq": ["$left.identities.rlp17_b0", "$right.identities.rlp23_b0"] })
│  ├─ Name("1" -> { "$eq": ["$left.identities.rlp15_b0", "$right.identities.rlp23_b0"] })
│  ├─ Name("2" -> { "$eq": ["$left.identities.rlp8_k0", "$right.identities.rlp23_b0"] })
│  ├─ Name("src")
│  │  ├─ Name("left" -> "$left")
│  │  ╰─ Name("right" -> "$right")
│  ╰─ ExcludeId
├─ $MatchF
│  ╰─ Or
│     ├─ Doc
│     │  ╰─ CondExpr($0 -> Eq(Bool(true)))
│     ├─ Doc
│     │  ╰─ CondExpr($1 -> Eq(Bool(true)))
│     ╰─ Doc
│        ╰─ CondExpr($2 -> Eq(Bool(true)))
╰─ $SimpleMapF
   ├─ Map
   │  ╰─ Obj
   │     ╰─ Key(__quasar_mongodb_sigil)
   │        ╰─ SpliceObjects
   │           ├─ JsCore(_.src.left.value)
   │           ╰─ JsCore(_.src.right.value)
   ╰─ Scope(ListMap())