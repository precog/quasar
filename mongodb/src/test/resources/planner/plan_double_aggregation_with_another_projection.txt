Chain
├─ $FoldLeftF
│  ├─ Chain
│  │  ├─ $ReadF(db; zips)
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("f0" -> {
│  │  │  │          "$avg": {
│  │  │  │            "$cond": [
│  │  │  │              {
│  │  │  │                "$and": [
│  │  │  │                  { "$lt": [{ "$literal": null }, "$pop"] },
│  │  │  │                  { "$lt": ["$pop", { "$literal": "" }] }]
│  │  │  │              },
│  │  │  │              "$pop",
│  │  │  │              { "$literal": undefined }]
│  │  │  │          }
│  │  │  │        })
│  │  │  ╰─ By
│  │  │     ╰─ Name("0" -> "$state")
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("f0" -> { "$sum": "$f0" })
│  │  │  ╰─ By({ "$literal": null })
│  │  ├─ $ProjectF
│  │  │  ├─ Name("0" -> "$f0")
│  │  │  ╰─ ExcludeId
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│  │  │  ╰─ By({ "$literal": null })
│  │  ╰─ $ProjectF
│  │     ├─ Name("_id" -> "$_id")
│  │     ├─ Name("value")
│  │     │  ├─ Name("left" -> "$0")
│  │     │  ├─ Name("right" -> { "$literal": [] })
│  │     │  ╰─ Name("_id" -> "$_id")
│  │     ╰─ IncludeId
│  ╰─ Chain
│     ├─ $ReadF(db; zips)
│     ├─ $GroupF
│     │  ├─ Grouped
│     │  │  ╰─ Name("f0" -> {
│     │  │          "$min": {
│     │  │            "$cond": [
│     │  │              {
│     │  │                "$or": [
│     │  │                  {
│     │  │                    "$or": [
│     │  │                      {
│     │  │                        "$and": [
│     │  │                          { "$lt": [{ "$literal": null }, "$city"] },
│     │  │                          { "$lt": ["$city", { "$literal": {  } }] }]
│     │  │                      },
│     │  │                      {
│     │  │                        "$and": [
│     │  │                          {
│     │  │                            "$lte": [
│     │  │                              { "$literal": ISODate("-292275055-05-16T16:47:04.192Z") },
│     │  │                              "$city"]
│     │  │                          },
│     │  │                          {
│     │  │                            "$lt": ["$city", { "$literal": Timestamp(-2147483648, 0) }]
│     │  │                          }]
│     │  │                      }]
│     │  │                  },
│     │  │                  {
│     │  │                    "$and": [
│     │  │                      { "$lte": [{ "$literal": false }, "$city"] },
│     │  │                      { "$lte": ["$city", { "$literal": true }] }]
│     │  │                  }]
│     │  │              },
│     │  │              "$city",
│     │  │              { "$literal": undefined }]
│     │  │          }
│     │  │        })
│     │  ╰─ By
│     │     ╰─ Name("0" -> "$state")
│     ├─ $ProjectF
│     │  ├─ Name("1" -> "$f0")
│     │  ╰─ ExcludeId
│     ├─ $GroupF
│     │  ├─ Grouped
│     │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│     │  ╰─ By({ "$literal": null })
│     ├─ $ProjectF
│     │  ├─ Name("right" -> "$0")
│     │  ├─ Name("left" -> { "$literal": [] })
│     │  ├─ Name("_id" -> true)
│     │  ╰─ IncludeId
│     ╰─ $ReduceF
│        ├─ JavaScript(function (key, values) {
│        │               var result = { "left": [], "right": [] };
│        │               values.forEach(
│        │                 function (value) {
│        │                   result.left = result.left.concat(value.left);
│        │                   result.right = result.right.concat(value.right)
│        │                 });
│        │               return result
│        │             })
│        ╰─ Scope(ListMap())
├─ $MatchF
│  ╰─ Doc
│     ├─ NotCondExpr($left -> Size(0))
│     ╰─ NotCondExpr($right -> Size(0))
├─ $UnwindF
│  ╰─ Path(DocField(BsonField.Name("right")))
├─ $UnwindF
│  ╰─ Path(DocField(BsonField.Name("left")))
╰─ $SimpleMapF
   ├─ Map
   │  ╰─ Obj
   │     ╰─ Key(__quasar_mongodb_sigil)
   │        ╰─ SpliceObjects
   │           ├─ JsCore(_.left)
   │           ╰─ JsCore(_.right)
   ╰─ Scope(ListMap())