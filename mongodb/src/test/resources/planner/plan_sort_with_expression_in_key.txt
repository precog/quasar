Chain
├─ $ReadF(db; foo)
├─ $SimpleMapF
│  ├─ Map
│  │  ╰─ Let(__val)
│  │     ├─ Arr
│  │     │  ├─ Obj
│  │     │  │  ╰─ Key(baz: _.baz)
│  │     │  ╰─ Ident(_)
│  │     ╰─ Obj
│  │        ├─ Key(0: (((isNumber(
│  │        │      (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].bar : undefined) || ((((isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].bar : undefined) instanceof NumberInt) || (((isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].bar : undefined) instanceof NumberLong))) || (((isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].bar : undefined) instanceof Date)) && (isObject(__val[1]) && (! Array.isArray(__val[1])))) ? __val[1].bar / 10 : undefined)
│  │        ╰─ Key(src: __val)
│  ╰─ Scope(Map())
├─ $SortF
│  ╰─ SortKey(0 -> Ascending)
╰─ $ProjectF
   ├─ Name("value" -> { "$arrayElemAt": ["$src", { "$literal": NumberInt("0") }] })
   ╰─ ExcludeId