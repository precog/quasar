Chain
├─ $FoldLeftF
│  ├─ Chain
│  │  ├─ $ReadF(db; foo)
│  │  ├─ $ProjectF
│  │  │  ├─ Name("0" -> { "$arrayElemAt": [["$_id", "$$ROOT"], { "$literal": NumberInt("1") }] })
│  │  │  ├─ Name("1" -> { "$literal": true })
│  │  │  ├─ Name("src" -> ["$_id", "$$ROOT"])
│  │  │  ╰─ ExcludeId
│  │  ├─ $MatchF
│  │  │  ╰─ And
│  │  │     ├─ Doc
│  │  │     │  ╰─ Expr($0 -> Type(Doc))
│  │  │     ╰─ Doc
│  │  │        ╰─ Expr($1 -> Eq(Bool(true)))
│  │  ├─ $SimpleMapF
│  │  │  ├─ Map
│  │  │  │  ╰─ Obj
│  │  │  │     ├─ Key(0: _.src[1].id)
│  │  │  │     ╰─ Key(content: _.src)
│  │  │  ╰─ Scope(Map())
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("0" -> { "$push": "$content" })
│  │  │  ╰─ By
│  │  │     ╰─ Name("0" -> "$0")
│  │  ╰─ $ProjectF
│  │     ├─ Name("_id" -> "$_id")
│  │     ├─ Name("value")
│  │     │  ├─ Name("left" -> "$0")
│  │     │  ├─ Name("right" -> { "$literal": [] })
│  │     │  ╰─ Name("_id" -> "$_id")
│  │     ╰─ IncludeId
│  ╰─ Chain
│     ├─ $ReadF(db; bar)
│     ├─ $ProjectF
│     │  ├─ Name("0" -> { "$arrayElemAt": [["$_id", "$$ROOT"], { "$literal": NumberInt("1") }] })
│     │  ├─ Name("1" -> { "$literal": true })
│     │  ├─ Name("src" -> ["$_id", "$$ROOT"])
│     │  ╰─ ExcludeId
│     ├─ $MatchF
│     │  ╰─ And
│     │     ├─ Doc
│     │     │  ╰─ Expr($0 -> Type(Doc))
│     │     ╰─ Doc
│     │        ╰─ Expr($1 -> Eq(Bool(true)))
│     ├─ $MapF
│     │  ├─ JavaScript(function (key, value) {
│     │  │               return [{ "0": value.src[1].foo_id }, { "left": [], "right": [value.src] }]
│     │  │             })
│     │  ╰─ Scope(Map())
│     ╰─ $ReduceF
│        ├─ JavaScript(function (key, values) {
│        │               var result = { "left": [], "right": [] };
│        │               values.forEach(
│        │                 function (value) {
│        │                   result.left = result.left.concat(value.left);
│        │                   result.right = result.right.concat(value.right)
│        │                 });
│        │               return result
│        │             })
│        ╰─ Scope(Map())
├─ $MatchF
│  ╰─ Doc
│     ╰─ NotExpr($right -> Size(0))
├─ $ProjectF
│  ├─ Name("left" -> {
│  │       "$cond": [
│  │         { "$eq": [{ "$size": "$left" }, { "$literal": NumberInt("0") }] },
│  │         { "$literal": [{  }] },
│  │         "$left"]
│  │     })
│  ├─ Name("right" -> "$right")
│  ╰─ ExcludeId
├─ $UnwindF(DocField(BsonField.Name("right")))
├─ $UnwindF(DocField(BsonField.Name("left")))
├─ $SimpleMapF
│  ├─ Map
│  │  ╰─ Obj
│  │     ├─ Key(name: (isObject(_.left[1]) && (! Array.isArray(_.left[1]))) ? _.left[1].name : undefined)
│  │     ╰─ Key(address: (isObject(_.right[1]) && (! Array.isArray(_.right[1]))) ? _.right[1].address : undefined)
│  ╰─ Scope(Map())
╰─ $ProjectF
   ├─ Name("name" -> true)
   ├─ Name("address" -> true)
   ╰─ ExcludeId