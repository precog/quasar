Chain
├─ $FoldLeftF
│  ├─ Chain
│  │  ├─ $ReadF(db; zips)
│  │  ├─ $SimpleMapF
│  │  │  ├─ Map
│  │  │  │  ╰─ Let(__val)
│  │  │  │     ├─ JsCore([_._id, _])
│  │  │  │     ╰─ Arr
│  │  │  │        ├─ JsCore(__val[0])
│  │  │  │        ├─ Obj
│  │  │  │        │  ╰─ Key(city: (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].city : undefined)
│  │  │  │        ├─ Obj
│  │  │  │        │  ╰─ Key(state: (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].state : undefined)
│  │  │  │        ╰─ JsCore(__val[1])
│  │  │  ╰─ Scope(Map())
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│  │  │  ╰─ By({ "$literal": null })
│  │  ╰─ $ProjectF
│  │     ├─ Name("_id" -> "$_id")
│  │     ├─ Name("value")
│  │     │  ├─ Name("left" -> "$0")
│  │     │  ├─ Name("right" -> { "$literal": [] })
│  │     │  ╰─ Name("_id" -> "$_id")
│  │     ╰─ IncludeId
│  ╰─ Chain
│     ├─ $ReadF(db; zips)
│     ├─ $SimpleMapF
│     │  ├─ Map
│     │  │  ╰─ Let(__val)
│     │  │     ├─ Let(__val)
│     │  │     │  ├─ JsCore([_._id, _])
│     │  │     │  ╰─ Arr
│     │  │     │     ├─ JsCore(__val[0])
│     │  │     │     ├─ Obj
│     │  │     │     │  ╰─ Key(city: (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].city : undefined)
│     │  │     │     ├─ Obj
│     │  │     │     │  ╰─ Key(state: (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].state : undefined)
│     │  │     │     ╰─ JsCore(__val[1])
│     │  │     ╰─ Obj
│     │  │        ╰─ Key(f0: ((isNumber(
│     │  │               (isObject(__val[3]) && (! Array.isArray(__val[3]))) ? __val[3].pop : undefined) || ((((isObject(__val[3]) && (! Array.isArray(__val[3]))) ? __val[3].pop : undefined) instanceof NumberInt) || (((isObject(__val[3]) && (! Array.isArray(__val[3]))) ? __val[3].pop : undefined) instanceof NumberLong))) && (isObject(__val[3]) && (! Array.isArray(__val[3])))) ? __val[3].pop : undefined)
│     │  ╰─ Scope(Map())
│     ├─ $GroupF
│     │  ├─ Grouped
│     │  │  ╰─ Name("f0" -> { "$sum": "$f0" })
│     │  ╰─ By({ "$literal": null })
│     ├─ $MapF
│     │  ├─ JavaScript(function (key, value) { return [null, { "left": [], "right": [value.f0] }] })
│     │  ╰─ Scope(Map())
│     ╰─ $ReduceF
│        ├─ JavaScript(function (key, values) {
│        │               var result = { "left": [], "right": [] };
│        │               values.forEach(
│        │                 function (value) {
│        │                   result.left = result.left.concat(value.left);
│        │                   result.right = result.right.concat(value.right)
│        │                 });
│        │               return result
│        │             })
│        ╰─ Scope(Map())
├─ $MatchF
│  ╰─ Doc
│     ├─ NotExpr($left -> Size(0))
│     ╰─ NotExpr($right -> Size(0))
├─ $UnwindF(DocField(BsonField.Name("right")))
├─ $UnwindF(DocField(BsonField.Name("left")))
╰─ $SimpleMapF
   ├─ Map
   │  ╰─ Obj
   │     ╰─ Key(__quasar_mongodb_sigil)
   │        ╰─ SpliceObjects
   │           ├─ SpliceObjects
   │           │  ├─ JsCore(_.left[1])
   │           │  ╰─ JsCore(_.left[2])
   │           ╰─ Obj
   │              ╰─ Key(2: _.right)
   ╰─ Scope(Map())