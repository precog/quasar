Chain
├─ $FoldLeftF
│  ├─ Chain
│  │  ├─ $ReadF(db; zips)
│  │  ├─ $SimpleMapF
│  │  │  ├─ Map
│  │  │  │  ╰─ Let(__val)
│  │  │  │     ├─ Let(__val)
│  │  │  │     │  ├─ JsCore([_._id, _])
│  │  │  │     │  ╰─ JsCore([
│  │  │  │     │            __val[0],
│  │  │  │     │            (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1] : undefined,
│  │  │  │     │            [
│  │  │  │     │              (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].city : undefined],
│  │  │  │     │            __val[1]])
│  │  │  │     ╰─ Obj
│  │  │  │        ├─ Key(f0: ((isNumber(
│  │  │  │        │      (isObject(__val[3]) && (! Array.isArray(__val[3]))) ? __val[3].pop : undefined) || ((((isObject(__val[3]) && (! Array.isArray(__val[3]))) ? __val[3].pop : undefined) instanceof NumberInt) || (((isObject(__val[3]) && (! Array.isArray(__val[3]))) ? __val[3].pop : undefined) instanceof NumberLong))) && (isObject(__val[3]) && (! Array.isArray(__val[3])))) ? __val[3].pop : undefined)
│  │  │  │        ├─ Key(f1: (isObject(__val[3]) && (! Array.isArray(__val[3]))) ? __val[3].city : undefined)
│  │  │  │        ╰─ Key(b0: [
│  │  │  │               (isObject(__val[3]) && (! Array.isArray(__val[3]))) ? __val[3].city : undefined])
│  │  │  ╰─ Scope(Map())
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ├─ Name("f0" -> { "$sum": "$f0" })
│  │  │  │  ╰─ Name("f1" -> { "$first": "$f1" })
│  │  │  ╰─ By
│  │  │     ╰─ Name("0" -> "$b0")
│  │  ├─ $SimpleMapF
│  │  │  ├─ Map
│  │  │  │  ╰─ Arr
│  │  │  │     ├─ JsCore(_._id["0"])
│  │  │  │     ├─ Obj
│  │  │  │     │  ╰─ Key(totalPop: _.f0)
│  │  │  │     ╰─ Obj
│  │  │  │        ╰─ Key(city: _.f1)
│  │  │  ╰─ Scope(Map())
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│  │  │  ╰─ By({ "$literal": null })
│  │  ╰─ $ProjectF
│  │     ├─ Name("_id" -> "$_id")
│  │     ├─ Name("value")
│  │     │  ├─ Name("left" -> "$0")
│  │     │  ├─ Name("right" -> { "$literal": [] })
│  │     │  ╰─ Name("_id" -> "$_id")
│  │     ╰─ IncludeId
│  ╰─ Chain
│     ├─ $ReadF(db; zips)
│     ├─ $SimpleMapF
│     │  ├─ Map
│     │  │  ╰─ Let(__val)
│     │  │     ├─ JsCore([_._id, _])
│     │  │     ╰─ JsCore([
│     │  │               __val[0],
│     │  │               (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1] : undefined,
│     │  │               [
│     │  │                 (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].city : undefined],
│     │  │               __val[1]])
│     │  ╰─ Scope(Map())
│     ├─ $MapF
│     │  ├─ JavaScript(function (key, value) { return [null, { "left": [], "right": [value] }] })
│     │  ╰─ Scope(Map())
│     ╰─ $ReduceF
│        ├─ JavaScript(function (key, values) {
│        │               var result = { "left": [], "right": [] };
│        │               values.forEach(
│        │                 function (value) {
│        │                   result.left = result.left.concat(value.left);
│        │                   result.right = result.right.concat(value.right)
│        │                 });
│        │               return result
│        │             })
│        ╰─ Scope(Map())
├─ $MatchF
│  ╰─ Doc
│     ├─ NotExpr($left -> Size(0))
│     ╰─ NotExpr($right -> Size(0))
├─ $UnwindF(DocField(BsonField.Name("right")))
├─ $UnwindF(DocField(BsonField.Name("left")))
├─ $SimpleMapF
│  ├─ Map
│  │  ╰─ Obj
│  │     ├─ Key(f0)
│  │     │  ╰─ Let(__val)
│  │     │     ├─ JsCore([_.left, _.right])
│  │     │     ╰─ SpliceObjects
│  │     │        ├─ SpliceObjects
│  │     │        │  ├─ JsCore(__val[0][1])
│  │     │        │  ╰─ JsCore(__val[0][2])
│  │     │        ╰─ Obj
│  │     │           ╰─ Key(state: __val[1][1].state)
│  │     ╰─ Key(b0)
│  │        ╰─ Let(__val)
│  │           ├─ JsCore([_.left, _.right])
│  │           ╰─ SpliceObjects
│  │              ├─ SpliceObjects
│  │              │  ├─ JsCore(__val[0][1])
│  │              │  ╰─ JsCore(__val[0][2])
│  │              ╰─ Obj
│  │                 ╰─ Key(state: __val[1][1].state)
│  ╰─ Scope(Map())
├─ $GroupF
│  ├─ Grouped
│  │  ╰─ Name("f0" -> { "$first": "$f0" })
│  ╰─ By
│     ╰─ Name("0" -> "$b0")
╰─ $ProjectF
   ├─ Name("__quasar_mongodb_sigil" -> "$f0")
   ╰─ ExcludeId