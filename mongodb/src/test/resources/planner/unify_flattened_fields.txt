Chain
├─ $ReadF(db; zips)
├─ $SimpleMapF
│  ├─ Map
│  │  ╰─ Obj
│  │     ├─ Key(s: (function (__val) {
│  │     │      return [
│  │     │        __val[0],
│  │     │        __val[1],
│  │     │        [
│  │     │          __val[0],
│  │     │          (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].loc : undefined]]
│  │     │    })(
│  │     │      [_._id, _]))
│  │     ╰─ Key(f: (function (__val) { return Array.isArray(__val[2][1]) ? __val[2][1] : undefined })(
│  │            (function (__val) {
│  │              return [
│  │                __val[0],
│  │                __val[1],
│  │                [
│  │                  __val[0],
│  │                  (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? __val[1].loc : undefined]]
│  │            })(
│  │              [_._id, _])))
│  ├─ Flatten
│  │  ╰─ JsCore(_.f)
│  ├─ Map
│  │  ╰─ JsCore([
│  │            (isObject(_.s[1]) && (! Array.isArray(_.s[1]))) ? _.s[1] : undefined,
│  │            _.f < 0])
│  ╰─ Scope(Map())
├─ $ProjectF
│  ├─ Name("0" -> { "$arrayElemAt": ["$$ROOT", { "$literal": NumberInt("1") }] })
│  ├─ Name("src" -> "$$ROOT")
│  ╰─ IgnoreId
├─ $MatchF
│  ╰─ Doc
│     ╰─ Expr($0 -> Eq(Bool(true)))
╰─ $SimpleMapF
   ├─ Map
   │  ╰─ JsCore(Array.isArray(_.src[0].loc) ? _.src[0].loc : undefined)
   ├─ Flatten
   │  ╰─ Ident(_)
   ╰─ Scope(Map())