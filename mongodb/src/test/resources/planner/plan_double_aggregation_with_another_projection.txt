Chain
├─ $FoldLeftF
│  ├─ Chain
│  │  ├─ $ReadF(db; zips)
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ├─ Name("f0" -> {
│  │  │  │  │       "$avg": {
│  │  │  │  │         "$cond": [
│  │  │  │  │           {
│  │  │  │  │             "$and": [
│  │  │  │  │               { "$lt": [{ "$literal": null }, "$pop"] },
│  │  │  │  │               { "$lt": ["$pop", { "$literal": "" }] }]
│  │  │  │  │           },
│  │  │  │  │           "$pop",
│  │  │  │  │           { "$literal": undefined }]
│  │  │  │  │       }
│  │  │  │  │     })
│  │  │  │  ╰─ Name("f1" -> {
│  │  │  │          "$min": {
│  │  │  │            "$cond": [
│  │  │  │              {
│  │  │  │                "$or": [
│  │  │  │                  {
│  │  │  │                    "$and": [
│  │  │  │                      { "$lt": [{ "$literal": null }, "$city"] },
│  │  │  │                      { "$lt": ["$city", { "$literal": {  } }] }]
│  │  │  │                  },
│  │  │  │                  {
│  │  │  │                    "$and": [
│  │  │  │                      { "$lte": [{ "$literal": false }, "$city"] },
│  │  │  │                      { "$lt": ["$city", { "$literal": new RegExp("", "") }] }]
│  │  │  │                  }]
│  │  │  │              },
│  │  │  │              "$city",
│  │  │  │              { "$literal": undefined }]
│  │  │  │          }
│  │  │  │        })
│  │  │  ╰─ By
│  │  │     ╰─ Name("0" -> ["$foo"])
│  │  ├─ $SimpleMapF
│  │  │  ├─ Map
│  │  │  │  ╰─ JsCore([[_._id["0"]], _.f0, [[_._id["0"]], _.f1]])
│  │  │  ╰─ Scope(Map())
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("f0" -> { "$sum": { "$arrayElemAt": ["$$ROOT", { "$literal": NumberInt("1") }] } })
│  │  │  ╰─ By({ "$literal": null })
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("0" -> { "$push": "$f0" })
│  │  │  ╰─ By({ "$literal": null })
│  │  ╰─ $ProjectF
│  │     ├─ Name("_id" -> "$_id")
│  │     ├─ Name("value")
│  │     │  ├─ Name("left" -> "$0")
│  │     │  ├─ Name("right" -> { "$literal": [] })
│  │     │  ╰─ Name("_id" -> "$_id")
│  │     ╰─ IncludeId
│  ╰─ Chain
│     ├─ $ReadF(db; zips)
│     ├─ $GroupF
│     │  ├─ Grouped
│     │  │  ├─ Name("f0" -> {
│     │  │  │       "$avg": {
│     │  │  │         "$cond": [
│     │  │  │           {
│     │  │  │             "$and": [
│     │  │  │               { "$lt": [{ "$literal": null }, "$pop"] },
│     │  │  │               { "$lt": ["$pop", { "$literal": "" }] }]
│     │  │  │           },
│     │  │  │           "$pop",
│     │  │  │           { "$literal": undefined }]
│     │  │  │       }
│     │  │  │     })
│     │  │  ╰─ Name("f1" -> {
│     │  │          "$min": {
│     │  │            "$cond": [
│     │  │              {
│     │  │                "$or": [
│     │  │                  {
│     │  │                    "$and": [
│     │  │                      { "$lt": [{ "$literal": null }, "$city"] },
│     │  │                      { "$lt": ["$city", { "$literal": {  } }] }]
│     │  │                  },
│     │  │                  {
│     │  │                    "$and": [
│     │  │                      { "$lte": [{ "$literal": false }, "$city"] },
│     │  │                      { "$lt": ["$city", { "$literal": new RegExp("", "") }] }]
│     │  │                  }]
│     │  │              },
│     │  │              "$city",
│     │  │              { "$literal": undefined }]
│     │  │          }
│     │  │        })
│     │  ╰─ By
│     │     ╰─ Name("0" -> ["$foo"])
│     ├─ $SimpleMapF
│     │  ├─ Map
│     │  │  ╰─ JsCore([[_._id["0"]], _.f0, [[_._id["0"]], _.f1]])
│     │  ╰─ Scope(Map())
│     ├─ $ProjectF
│     │  ├─ Name("0" -> { "$arrayElemAt": ["$$ROOT", { "$literal": NumberInt("2") }] })
│     │  ╰─ ExcludeId
│     ├─ $MapF
│     │  ├─ JavaScript(function (key, value) { return [null, { "left": [], "right": [value["0"]] }] })
│     │  ╰─ Scope(Map())
│     ╰─ $ReduceF
│        ├─ JavaScript(function (key, values) {
│        │               var result = { "left": [], "right": [] };
│        │               values.forEach(
│        │                 function (value) {
│        │                   result.left = result.left.concat(value.left);
│        │                   result.right = result.right.concat(value.right)
│        │                 });
│        │               return result
│        │             })
│        ╰─ Scope(Map())
├─ $MatchF
│  ╰─ Doc
│     ├─ NotExpr($left -> Size(0))
│     ╰─ NotExpr($right -> Size(0))
├─ $UnwindF(DocField(BsonField.Name("right")))
├─ $UnwindF(DocField(BsonField.Name("left")))
╰─ $ProjectF
   ├─ Name("0" -> "$left")
   ├─ Name("1" -> { "$arrayElemAt": ["$right", { "$literal": NumberInt("1") }] })
   ╰─ ExcludeId