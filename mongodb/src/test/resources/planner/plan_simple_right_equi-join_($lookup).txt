Chain
├─ $FoldLeftF
│  ├─ Chain
│  │  ├─ $ReadF(db; foo)
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│  │  │  ╰─ By
│  │  │     ╰─ Name("0" -> "$id")
│  │  ╰─ $ProjectF
│  │     ├─ Name("_id" -> "$_id")
│  │     ├─ Name("value")
│  │     │  ├─ Name("left" -> "$0")
│  │     │  ├─ Name("right" -> { "$literal": [] })
│  │     │  ╰─ Name("_id" -> "$_id")
│  │     ╰─ IncludeId
│  ╰─ Chain
│     ├─ $ReadF(db; bar)
│     ├─ $MapF
│     │  ├─ JavaScript(function (key, value) { return [{ "0": value.foo_id }, { "left": [], "right": [value] }] })
│     │  ╰─ Scope(Map())
│     ╰─ $ReduceF
│        ├─ JavaScript(function (key, values) {
│        │               var result = { "left": [], "right": [] };
│        │               values.forEach(
│        │                 function (value) {
│        │                   result.left = result.left.concat(value.left);
│        │                   result.right = result.right.concat(value.right)
│        │                 });
│        │               return result
│        │             })
│        ╰─ Scope(Map())
├─ $MatchF
│  ╰─ Doc
│     ╰─ NotExpr($right -> Size(0))
├─ $ProjectF
│  ├─ Name("left" -> {
│  │       "$cond": [
│  │         { "$eq": [{ "$size": "$left" }, { "$literal": NumberInt("0") }] },
│  │         { "$literal": [{  }] },
│  │         "$left"]
│  │     })
│  ├─ Name("right" -> "$right")
│  ╰─ ExcludeId
├─ $UnwindF
│  ╰─ Path(DocField(BsonField.Name("right")))
├─ $UnwindF
│  ╰─ Path(DocField(BsonField.Name("left")))
╰─ $ProjectF
   ├─ Name("name" -> "$left.name")
   ├─ Name("address" -> "$right.address")
   ╰─ ExcludeId