Chain
├─ $ReadF(db; user_comments)
├─ $ProjectF
│  ├─ Name("s" -> "$$ROOT")
│  ├─ Name("f" -> {
│  │       "$cond": [
│  │         {
│  │           "$and": [
│  │             { "$lte": [{ "$literal": [] }, "$comments"] },
│  │             { "$lt": ["$comments", { "$literal": BinData(0, "") }] }]
│  │         },
│  │         "$comments",
│  │         [{ "$literal": undefined }]]
│  │     })
│  ╰─ ExcludeId
├─ $UnwindF
│  ├─ Path(DocField(BsonField.Name("f")))
│  ╰─ IncludeArrayIndex(BsonField.Name("ix"))
├─ $ProjectF
│  ├─ Name("identities" -> { "esh39": "$ix" })
│  ├─ Name("value" -> { "original": "$s", "0": "$f" })
│  ╰─ ExcludeId
├─ $ProjectF
│  ├─ Name("s" -> "$$ROOT")
│  ├─ Name("f" -> {
│  │       "$cond": [
│  │         {
│  │           "$and": [
│  │             {
│  │               "$lte": [
│  │                 { "$literal": [] },
│  │                 {
│  │                   "$cond": [
│  │                     {
│  │                       "$and": [
│  │                         { "$lte": [{ "$literal": {  } }, "$value.original"] },
│  │                         { "$lt": ["$value.original", { "$literal": [] }] }]
│  │                     },
│  │                     "$value.original.comments",
│  │                     { "$literal": undefined }]
│  │                 }]
│  │             },
│  │             {
│  │               "$lt": [
│  │                 {
│  │                   "$cond": [
│  │                     {
│  │                       "$and": [
│  │                         { "$lte": [{ "$literal": {  } }, "$value.original"] },
│  │                         { "$lt": ["$value.original", { "$literal": [] }] }]
│  │                     },
│  │                     "$value.original.comments",
│  │                     { "$literal": undefined }]
│  │                 },
│  │                 { "$literal": BinData(0, "") }]
│  │             }]
│  │         },
│  │         "$value.original.comments",
│  │         [{ "$literal": undefined }]]
│  │     })
│  ╰─ ExcludeId
├─ $UnwindF
│  ├─ Path(DocField(BsonField.Name("f")))
│  ╰─ IncludeArrayIndex(BsonField.Name("ix"))
├─ $ProjectF
│  ├─ Name("0" -> { "$eq": ["$s.identities.esh39", "$ix"] })
│  ├─ Name("1" -> { "$eq": ["$s.identities.esh39", "$ix"] })
│  ├─ Name("2" -> { "$eq": ["$s.identities.esh39", "$ix"] })
│  ├─ Name("src")
│  │  ├─ Name("s" -> "$s")
│  │  ╰─ Name("f" -> ["$ix", "$f"])
│  ╰─ ExcludeId
├─ $MatchF
│  ╰─ Or
│     ├─ Doc
│     │  ╰─ CondExpr($0 -> Eq(Bool(true)))
│     ├─ Doc
│     │  ╰─ CondExpr($1 -> Eq(Bool(true)))
│     ╰─ Doc
│        ╰─ CondExpr($2 -> Eq(Bool(true)))
├─ $SimpleMapF
│  ├─ Map
│  │  ╰─ Obj
│  │     ├─ Key(identities: _.src.s.identities)
│  │     ╰─ Key(value)
│  │        ╰─ Obj
│  │           ├─ Key(left)
│  │           │  ╰─ Obj
│  │           │     ╰─ Key(0)
│  │           │        ╰─ Obj
│  │           │           ├─ Key(1: _.src.s.value["0"])
│  │           │           ╰─ Key(0: _.src.s.value.original)
│  │           ╰─ Key(right: _.src.f[1])
│  ╰─ Scope(ListMap())
├─ $ProjectF
│  ├─ Name("s" -> "$$ROOT")
│  ├─ Name("f" -> {
│  │       "$cond": [
│  │         {
│  │           "$and": [
│  │             { "$lte": [{ "$literal": [] }, "$value.right.replyTo"] },
│  │             { "$lt": ["$value.right.replyTo", { "$literal": BinData(0, "") }] }]
│  │         },
│  │         "$value.right.replyTo",
│  │         [{ "$literal": undefined }]]
│  │     })
│  ╰─ ExcludeId
├─ $UnwindF
│  ╰─ Path(DocField(BsonField.Name("f")))
├─ $ProjectF
│  ├─ Name("value" -> {
│  │       "filter_source": {
│  │         "$cond": [
│  │           {
│  │             "$and": [
│  │               { "$lte": [{ "$literal": {  } }, "$s.value.left.0.0"] },
│  │               { "$lt": ["$s.value.left.0.0", { "$literal": [] }] }]
│  │           },
│  │           "$s.value.left.0.0",
│  │           { "$literal": undefined }]
│  │       },
│  │       "filter_predicate_0": "$s.value.left.0.1",
│  │       "filter_predicate_1": "$f"
│  │     })
│  ╰─ ExcludeId
├─ $MatchF
│  ╰─ Or
│     ├─ Doc
│     │  ╰─ CondExpr($value.filter_predicate_0.id -> Regex(^.*Dr.*$,false,true,false,false))
│     ╰─ Doc
│        ╰─ CondExpr($value.filter_predicate_1 -> Regex(^.*Dr.*$,false,true,false,false))
╰─ $ProjectF
   ├─ Name("__quasar_mongodb_sigil" -> "$value.filter_source")
   ╰─ ExcludeId